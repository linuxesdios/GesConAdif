#!/usr/bin/env python3
"""
Script de depuraci√≥n para el sistema de guardado
Genera logs detallados para identificar problemas de persistencia
"""

import json
import os
import sys
import hashlib
from datetime import datetime

def calcular_hash_archivo(filepath):
    """Calcula el hash MD5 de un archivo"""
    try:
        with open(filepath, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    except:
        return "ERROR"

def leer_json_seguro(filepath):
    """Lee el JSON de forma segura"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå ERROR leyendo JSON: {e}")
        return None

def buscar_plazo_ejecucion(data, nombre_obra):
    """Busca el plazoEjecucion de una obra espec√≠fica"""
    try:
        for obra in data.get('obras', []):
            if obra.get('nombreObra') == nombre_obra:
                return obra.get('plazoEjecucion', 'NO_ENCONTRADO')
        return 'OBRA_NO_ENCONTRADA'
    except:
        return 'ERROR'

def main():
    """Funci√≥n principal de depuraci√≥n"""
    
    json_path = "F:/generador_actas/BaseDatos.json"
    obra_test = "OBRAS DE REPARACI√ìN EN LAS INSTALACIONES INTERIORES"
    
    print("SCRIPT DE DEPURACION DEL SISTEMA DE GUARDADO")
    print("=" * 60)
    print(f"Archivo JSON: {json_path}")
    print(f"Obra de prueba: {obra_test}")
    print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # 1. VERIFICAR EXISTENCIA Y PERMISOS
    print("1. VERIFICANDO ARCHIVO JSON...")
    if not os.path.exists(json_path):
        print(f"‚ùå El archivo no existe: {json_path}")
        return
    
    # Permisos
    readable = os.access(json_path, os.R_OK)
    writable = os.access(json_path, os.W_OK)
    print(f"Lectura: {'OK' if readable else 'ERROR'}")
    print(f"Escritura: {'OK' if writable else 'ERROR'}")
    
    # Tama√±o y √∫ltima modificaci√≥n
    stats = os.stat(json_path)
    size_kb = round(stats.st_size / 1024, 2)
    mod_time = datetime.fromtimestamp(stats.st_mtime).strftime('%Y-%m-%d %H:%M:%S')
    print(f"üìè Tama√±o: {size_kb} KB")
    print(f"üìÖ √öltima modificaci√≥n: {mod_time}")
    print()
    
    # 2. LEER CONTENIDO ACTUAL
    print("2Ô∏è‚É£ LEYENDO CONTENIDO ACTUAL...")
    data = leer_json_seguro(json_path)
    if not data:
        return
    
    hash_inicial = calcular_hash_archivo(json_path)
    plazo_inicial = buscar_plazo_ejecucion(data, obra_test)
    
    print(f"üîí Hash MD5 inicial: {hash_inicial[:8]}...")
    print(f"‚è±Ô∏è  plazoEjecucion actual: {plazo_inicial}")
    print()
    
    # 3. SIMULACI√ìN DE CAMBIO
    print("3Ô∏è‚É£ SIMULANDO CAMBIO DE plazoEjecucion...")
    nuevo_valor = "999"  # Valor √∫nico para testing
    
    # Buscar y modificar la obra
    obra_encontrada = False
    for obra in data.get('obras', []):
        if obra.get('nombreObra') == obra_test:
            valor_anterior = obra.get('plazoEjecucion', 'N/A')
            obra['plazoEjecucion'] = nuevo_valor
            obra['fechaModificacion'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            obra_encontrada = True
            print(f"üìù Cambiando plazoEjecucion: '{valor_anterior}' ‚Üí '{nuevo_valor}'")
            break
    
    if not obra_encontrada:
        print(f"‚ùå No se encontr√≥ la obra: {obra_test}")
        return
    
    # 4. INTENTAR GUARDAR
    print("\n4Ô∏è‚É£ GUARDANDO CAMBIOS...")
    
    backup_path = json_path + ".backup_debug"
    try:
        # Crear backup
        import shutil
        shutil.copy2(json_path, backup_path)
        print(f"üíæ Backup creado: {backup_path}")
        
        # Escribir cambios
        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        print("‚úÖ Escritura completada")
        
    except Exception as e:
        print(f"‚ùå Error en escritura: {e}")
        return
    
    # 5. VERIFICAR PERSISTENCIA
    print("\n5Ô∏è‚É£ VERIFICANDO PERSISTENCIA...")
    
    # Nuevo hash
    hash_final = calcular_hash_archivo(json_path)
    
    # Releer archivo
    data_verificacion = leer_json_seguro(json_path)
    plazo_final = buscar_plazo_ejecucion(data_verificacion, obra_test) if data_verificacion else "ERROR"
    
    print(f"üîí Hash MD5 final: {hash_final[:8]}...")
    print(f"‚è±Ô∏è  plazoEjecucion verificado: {plazo_final}")
    print(f"üîÑ Hash cambi√≥: {'‚úÖ' if hash_inicial != hash_final else '‚ùå'}")
    print(f"‚úÖ Valor correcto: {'‚úÖ' if plazo_final == nuevo_valor else '‚ùå'}")
    
    # 6. AN√ÅLISIS DE RESULTADOS
    print("\n6Ô∏è‚É£ AN√ÅLISIS DE RESULTADOS...")
    if plazo_final == nuevo_valor:
        print("üéâ √âXITO: El cambio se persisti√≥ correctamente")
        print("üí° El problema NO est√° en el mecanismo de guardado b√°sico")
        print("üí° Revisar el sistema de autoguardado de la aplicaci√≥n")
    else:
        print("üö® FALLO: El cambio NO se persisti√≥")
        print("üí° Hay un problema en el sistema de escritura")
        if plazo_final == plazo_inicial:
            print("üí° El archivo no se modific√≥ en absoluto")
        else:
            print(f"üí° El archivo se modific√≥ pero con valor incorrecto: '{plazo_final}'")
    
    # 7. RESTAURAR BACKUP
    print("\n7Ô∏è‚É£ RESTAURANDO BACKUP...")
    try:
        shutil.copy2(backup_path, json_path)
        os.remove(backup_path)
        print("‚úÖ Backup restaurado y eliminado")
    except Exception as e:
        print(f"‚ùå Error restaurando backup: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ DEPURACI√ìN COMPLETADA")

if __name__ == "__main__":
    main()
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\compilar_simplificado.py 
================================== 
 
26:def activar_entorno_virtual(): 
43:def preservar_archivos_criticos(): 
95:def limpiar_archivos_no_deseados(): 
134:def verificar_dependencias(python_exe): 
151:def verificar_archivos_necesarios(): 
175:def compilar_aplicacion_doble(python_exe): 
291:def crear_estructura_simplificada(backups): 
295:    # Definir rutas 
457:def verificar_estructura_final_simplificada(): 
567:def limpiar_temporales(): 
581:def main(): 
23:from pathlib import Path 
19:import os 
20:import sys 
21:import subprocess 
22:import shutil 
23:from pathlib import Path 
24:import time 
142:                python_exe, "-c", f"import {dep.replace('-', '_').replace('python_', '')}" 
207:        "--hidden-import=PyQt5.QtCore", 
208:        "--hidden-import=PyQt5.QtWidgets",  
209:        "--hidden-import=PyQt5.QtGui", 
210:        "--hidden-import=PyQt5.uic", 
211:        "--hidden-import=openpyxl", 
212:        "--hidden-import=lxml", 
213:        "--hidden-import=docx2pdf", 
214:        "--hidden-import=controladores.controlador_grafica", 
215:        "--hidden-import=controladores.controlador_json", 
216:        "--hidden-import=controladores.controlador_documentos", 
217:        "--hidden-import=controladores.controlador_pdf", 
218:        "--hidden-import=controladores.controlador_backup", 
219:        "--hidden-import=modelos_py", 
220:        "--hidden-import=helpers_py", 
605:        subprocess.run([python_exe, "-c", "import PyInstaller"], check=True, capture_output=True) 
681:        import traceback 
710:        print("\n💡 NOTAS IMPORTANTES:") 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\helpers_py.py 
================================== 
 
179:def abrir_archivo(ruta_archivo: str) -> bool: 
184:        ruta_archivo: Ruta del archivo a abrir 
204:        print(f"[helpers_py] ❌ Error abriendo archivo: {e}") 
446:def validar_extension_archivo(ruta_archivo: str, extensiones_validas: List[str]) -> bool: 
451:        ruta_archivo: Ruta del archivo 
524:def obtener_tamano_archivo_legible(ruta_archivo: str) -> str: 
529:        ruta_archivo: Ruta del archivo 
550:def es_archivo_reciente(ruta_archivo: str, dias: int = 7) -> bool: 
555:        ruta_archivo: Ruta del archivo 
604:def crear_copia_respaldo_proyecto(ruta_archivo: str, directorio_respaldos: str = None) -> str: 
609:        ruta_archivo: Ruta del archivo de proyecto 
742:def cargar_json_seguro(ruta_archivo: str) -> Optional[Dict[str, Any]]: 
747:        ruta_archivo: Ruta del archivo JSON 
771:def guardar_json_seguro(datos: Dict[str, Any], ruta_archivo: str, crear_backup: bool = True) -> bool: 
777:        ruta_archivo: Ruta del archivo JSON 
21:def es_numero_valido(valor_str: str) -> bool: 
46:def validar_nif_basico(nif: str) -> bool: 
57:def validar_email_basico(email: str) -> bool: 
68:def validar_datos_empresa(datos_empresa: Dict[str, str]) -> Tuple[bool, List[str]]: 
96:def validar_oferta_economica(valor_str: str) -> Tuple[bool, Optional[float], str]: 
121:def resource_path(relative_path: str) -> str: 
142:def get_ui_file_path() -> Optional[str]: 
151:def setup_ui_with_new_structure(main_window_instance) -> bool: 
179:def abrir_archivo(ruta_archivo: str) -> bool: 
208:def abrir_carpeta(ruta_carpeta: str) -> bool: 
237:def abrir_url(url: str) -> bool: 
255:def crear_carpeta_si_no_existe(ruta_carpeta: str) -> bool: 
279:def limpiar_nombre_archivo(nombre: str) -> str: 
309:def truncar_texto(texto: str, longitud_maxima: int, sufijo: str = "...") -> str: 
327:def limpiar_texto_para_json(texto: str) -> str: 
346:def extraer_numeros_de_texto(texto: str) -> str: 
361:def formatear_numero_espanol(numero: float, decimales: int = 2) -> str: 
381:def parsear_numero_espanol(texto: str) -> Optional[float]: 
405:def convertir_numero_espanol_a_float(texto: str) -> float: 
446:def validar_extension_archivo(ruta_archivo: str, extensiones_validas: List[str]) -> bool: 
461:def es_ruta_valida(ruta: str) -> bool: 
490:def validar_nif_basico(nif: str) -> bool: 
507:def validar_email_basico(email: str) -> bool: 
524:def obtener_tamano_archivo_legible(ruta_archivo: str) -> str: 
550:def es_archivo_reciente(ruta_archivo: str, dias: int = 7) -> bool: 
580:def generar_nombre_archivo_unico(directorio: str, nombre_base: str, extension: str) -> str: 
604:def crear_copia_respaldo_proyecto(ruta_archivo: str, directorio_respaldos: str = None) -> str: 
654:def convertir_docx_a_pdf(ruta_docx: str, cerrar_word: bool = True) -> Optional[str]: 
710:def formatear_fecha_espanol(fecha: datetime, formato: str = "completo") -> str: 
742:def cargar_json_seguro(ruta_archivo: str) -> Optional[Dict[str, Any]]: 
771:def guardar_json_seguro(datos: Dict[str, Any], ruta_archivo: str, crear_backup: bool = True) -> bool: 
807:def normalizar_ruta(ruta: str) -> str: 
820:def ruta_relativa_a_absoluta(ruta_relativa: str, base: str = None) -> str: 
826:        base: Directorio base (por defecto el actual) 
15:from typing import Optional, List, Dict, Any, Tuple 
16:from pathlib import Path 
17:from datetime import datetime 
164:            from PyQt5 import uic 
687:        from docx2pdf import convert 
699:            from docx2pdf import convert 
6:import os 
7:import sys 
8:import webbrowser 
9:import subprocess 
10:import shutil 
11:import json 
12:import time 
13:import glob 
14:import re 
15:from typing import Optional, List, Dict, Any, Tuple 
16:from pathlib import Path 
17:from datetime import datetime 
164:            from PyQt5 import uic 
517:    import re 
687:        from docx2pdf import convert 
699:            from docx2pdf import convert 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\main_py.py 
================================== 
 
23:class ModernSplashScreen(QSplashScreen): 
160:class AsyncLibraryLoader(QThread): 
26:    def __init__(self): 
101:    def _cargar_imagen_autor(self): 
137:    def show_message(self, message: str, step: int = None): 
167:    def __init__(self): 
171:    def run(self): 
204:    def _load_module(self, module_name: str, optional: bool = False): 
218:def main(): 
282:        def on_loading_complete(): 
308:        def on_loading_error(error_message: str): 
337:def show_critical_error(error_message: str): 
357:def quick_environment_setup(): 
361:        os.environ.setdefault('QT_AUTO_SCREEN_SCALE_FACTOR', '1') 
376:def lazy_dependency_check(): 
378:    def check_in_background(): 
12:from PyQt5.QtWidgets import QApplication, QSplashScreen, QLabel, QVBoxLayout, QWidget, QProgressBar 
13:from PyQt5.QtGui import QIcon, QPixmap, QPainter, QFont, QColor, QPen 
14:from PyQt5.QtCore import QTimer, QThread, pyqtSignal, Qt 
38:        from PyQt5.QtGui import QLinearGradient 
105:            from controladores.controlador_routes import ControladorRutas 
242:            from controladores.controlador_backup import crear_backup_automatico 
260:            from controladores.controlador_routes import ControladorRutas 
290:                from controladores.controlador_grafica import ControladorGrafica 
340:        from PyQt5.QtWidgets import QMessageBox 
8:import sys 
9:import os 
10:import threading 
11:import time 
12:from PyQt5.QtWidgets import QApplication, QSplashScreen, QLabel, QVBoxLayout, QWidget, QProgressBar 
13:from PyQt5.QtGui import QIcon, QPixmap, QPainter, QFont, QColor, QPen 
14:from PyQt5.QtCore import QTimer, QThread, pyqtSignal, Qt 
15:import traceback 
38:        from PyQt5.QtGui import QLinearGradient 
105:            from controladores.controlador_routes import ControladorRutas 
207:            return __import__(module_name) 
208:        except ImportError as e: 
210:                raise ImportError(f"Módulo requerido '{module_name}' no encontrado: {e}") 
219:    """Función principal unificada con carga optimizada y corrección de imports""" 
221:    # Configurar paths inmediatamente (sin imports pesados) 
242:            from controladores.controlador_backup import crear_backup_automatico 
260:            from controladores.controlador_routes import ControladorRutas 
286:                # Ahora SÍ cargar el controlador principal (IMPORTACIÓN CORREGIDA) 
289:                # Import dinámico del controlador CORREGIDO 
290:                from controladores.controlador_grafica import ControladorGrafica 
340:        from PyQt5.QtWidgets import QMessageBox 
386:                    __import__(module.replace('-', '_')) 
387:                except ImportError: 
405:        print("Iniciando con carga rapida y correcciones de imports...") 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\modelos_py.py 
================================== 
 
6:from dataclasses import dataclass, field 
12:class TipoContrato(Enum): 
18:class EstadoOferta(Enum): 
26:@dataclass 
27:class Empresa: 
68:    @classmethod 
80:@dataclass 
81:class Oferta: 
127:    @classmethod 
146:@dataclass 
147:class DatosContrato: 
228:    @classmethod 
255:@dataclass 
256:class DatosLiquidacion: 
319:    @classmethod 
339:@dataclass 
340:class Proyecto: 
453:    @classmethod 
491:@dataclass 
492:class ConfiguracionUI: 
514:    @classmethod 
528:@dataclass 
532:class Constantes: 
665:@dataclass 
666:class Oferta: 
712:    @classmethod 
731:@dataclass 
732:class DatosContrato: 
813:    @classmethod 
840:@dataclass 
841:class DatosLiquidacion: 
904:    @classmethod 
924:@dataclass 
925:class Proyecto: 
1029:    @classmethod 
1067:@dataclass 
1068:class ConfiguracionUI: 
1090:    @classmethod 
1104:@dataclass 
1108:class Constantes: 
36:    def validar_email_basico(email: str) -> bool: 
43:    def tiene_oferta(self) -> bool: 
47:    def es_valida(self) -> bool: 
51:    def limpiar_datos(self): 
58:    def to_dict(self) -> Dict[str, Any]: 
69:    def from_dict(cls, data: Dict[str, Any]) -> 'Empresa': 
91:    def __post_init__(self): 
99:    def es_valida(self) -> bool: 
107:    def calcular_iva(self, porcentaje: float = 0.21) -> float: 
111:    def calcular_total_con_iva(self, porcentaje: float = 0.21) -> float: 
115:    def to_dict(self) -> Dict[str, Any]: 
128:    def from_dict(cls, data: Dict[str, Any]) -> 'Oferta': 
174:    def calcular_iva(self, porcentaje: float = 0.21) -> float: 
180:    def calcular_total(self, porcentaje: float = 0.21) -> float: 
186:    def es_obra(self) -> bool: 
190:    def es_servicio(self) -> bool: 
194:    def obtener_limite_contratacion(self) -> float: 
201:    def cumple_limite_contratacion(self) -> bool: 
205:    def to_dict(self) -> Dict[str, Any]: 
229:    def from_dict(cls, data: Dict[str, Any]) -> 'DatosContrato': 
269:    def calcular_diferencia(self) -> float: 
274:    def calcular_porcentaje_ejecutado(self) -> float: 
282:    def calcular_saldos(self) -> tuple[float, float]: 
298:    def actualizar_calculos(self): 
304:    def to_dict(self) -> Dict[str, Any]: 
320:    def from_dict(cls, data: Dict[str, Any]) -> 'DatosLiquidacion': 
347:    contrato: DatosContrato = field(default_factory=DatosContrato) 
350:    empresas: List[Empresa] = field(default_factory=list) 
351:    ofertas: List[Oferta] = field(default_factory=list) 
354:    liquidacion: DatosLiquidacion = field(default_factory=DatosLiquidacion) 
357:    fecha_creacion: datetime = field(default_factory=datetime.now) 
358:    ultima_modificacion: datetime = field(default_factory=datetime.now) 
361:    def obtener_empresa_adjudicataria(self) -> Optional[Empresa]: 
377:    def obtener_oferta_minima(self) -> Optional[Oferta]: 
384:    def contar_ofertas_validas(self) -> int: 
388:    def hay_ofertas_duplicadas(self) -> bool: 
401:    def sincronizar_ofertas_con_empresas(self): 
425:    def actualizar_metadatos(self): 
429:    def es_valido(self) -> bool: 
438:    def to_dict(self) -> Dict[str, Any]: 
454:    def from_dict(cls, data: Dict[str, Any]) -> 'Proyecto': 
502:    def to_dict(self) -> Dict[str, Any]: 
515:    def from_dict(cls, data: Dict[str, Any]) -> 'ConfiguracionUI': 
604:def crear_proyecto_vacio(nombre: str, ruta: str) -> Proyecto: 
605:    """Crea un proyecto vacío con valores por defecto""" 
612:    # Agregar una empresa vacía por defecto 
618:def validar_nif_basico(nif: str) -> bool: 
626:def validar_email_basico(email: str) -> bool: 
633:def formatear_importe_espanol(importe: float, incluir_simbolo: bool = True) -> str: 
648:def parsear_importe_espanol(texto: str) -> float: 
676:    def __post_init__(self): 
684:    def es_valida(self) -> bool: 
692:    def calcular_iva(self, porcentaje: float = 0.21) -> float: 
696:    def calcular_total_con_iva(self, porcentaje: float = 0.21) -> float: 
700:    def to_dict(self) -> Dict[str, Any]: 
713:    def from_dict(cls, data: Dict[str, Any]) -> 'Oferta': 
759:    def calcular_iva(self, porcentaje: float = 0.21) -> float: 
765:    def calcular_total(self, porcentaje: float = 0.21) -> float: 
771:    def es_obra(self) -> bool: 
775:    def es_servicio(self) -> bool: 
779:    def obtener_limite_contratacion(self) -> float: 
786:    def cumple_limite_contratacion(self) -> bool: 
790:    def to_dict(self) -> Dict[str, Any]: 
814:    def from_dict(cls, data: Dict[str, Any]) -> 'DatosContrato': 
854:    def calcular_diferencia(self) -> float: 
859:    def calcular_porcentaje_ejecutado(self) -> float: 
867:    def calcular_saldos(self) -> tuple[float, float]: 
883:    def actualizar_calculos(self): 
889:    def to_dict(self) -> Dict[str, Any]: 
905:    def from_dict(cls, data: Dict[str, Any]) -> 'DatosLiquidacion': 
932:    contrato: DatosContrato = field(default_factory=DatosContrato) 
935:    empresas: List[Empresa] = field(default_factory=list) 
936:    ofertas: List[Oferta] = field(default_factory=list) 
939:    liquidacion: DatosLiquidacion = field(default_factory=DatosLiquidacion) 
942:    fecha_creacion: datetime = field(default_factory=datetime.now) 
943:    ultima_modificacion: datetime = field(default_factory=datetime.now) 
946:    def obtener_empresa_adjudicataria(self) -> Optional[Empresa]: 
964:    def hay_ofertas_duplicadas(self) -> bool: 
977:    def sincronizar_ofertas_con_empresas(self): 
1001:    def actualizar_metadatos(self): 
1005:    def es_valido(self) -> bool: 
1014:    def to_dict(self) -> Dict[str, Any]: 
1030:    def from_dict(cls, data: Dict[str, Any]) -> 'Proyecto': 
1078:    def to_dict(self) -> Dict[str, Any]: 
1091:    def from_dict(cls, data: Dict[str, Any]) -> 'ConfiguracionUI': 
1180:def crear_proyecto_vacio(nombre: str, ruta: str) -> Proyecto: 
1181:    """Crea un proyecto vacío con valores por defecto""" 
1188:    # Agregar una empresa vacía por defecto 
1194:def validar_nif_basico(nif: str) -> bool: 
6:from dataclasses import dataclass, field 
7:from typing import List, Optional, Dict, Any 
8:from datetime import datetime, date, time 
9:from enum import Enum 
69:    def from_dict(cls, data: Dict[str, Any]) -> 'Empresa': 
128:    def from_dict(cls, data: Dict[str, Any]) -> 'Oferta': 
133:            fecha_presentacion = date.fromisoformat(fecha_str) 
229:    def from_dict(cls, data: Dict[str, Any]) -> 'DatosContrato': 
236:            fechas[campo] = date.fromisoformat(fecha_str) if fecha_str else None 
320:    def from_dict(cls, data: Dict[str, Any]) -> 'DatosLiquidacion': 
323:        fecha_liquidacion = date.fromisoformat(fecha_str) if fecha_str else None 
454:    def from_dict(cls, data: Dict[str, Any]) -> 'Proyecto': 
466:            proyecto.fecha_creacion = datetime.fromisoformat(fecha_creacion_str) 
470:            proyecto.ultima_modificacion = datetime.fromisoformat(fecha_modificacion_str) 
474:        proyecto.contrato = DatosContrato.from_dict(contrato_data) 
478:        proyecto.empresas = [Empresa.from_dict(e) for e in empresas_data] 
482:        proyecto.ofertas = [Oferta.from_dict(o) for o in ofertas_data] 
486:        proyecto.liquidacion = DatosLiquidacion.from_dict(liquidacion_data) 
515:    def from_dict(cls, data: Dict[str, Any]) -> 'ConfiguracionUI': 
713:    def from_dict(cls, data: Dict[str, Any]) -> 'Oferta': 
718:            fecha_presentacion = date.fromisoformat(fecha_str) 
814:    def from_dict(cls, data: Dict[str, Any]) -> 'DatosContrato': 
821:            fechas[campo] = date.fromisoformat(fecha_str) if fecha_str else None 
905:    def from_dict(cls, data: Dict[str, Any]) -> 'DatosLiquidacion': 
908:        fecha_liquidacion = date.fromisoformat(fecha_str) if fecha_str else None 
1030:    def from_dict(cls, data: Dict[str, Any]) -> 'Proyecto': 
1042:            proyecto.fecha_creacion = datetime.fromisoformat(fecha_creacion_str) 
1046:            proyecto.ultima_modificacion = datetime.fromisoformat(fecha_modificacion_str) 
1050:        proyecto.contrato = DatosContrato.from_dict(contrato_data) 
1054:        proyecto.empresas = [Empresa.from_dict(e) for e in empresas_data] 
1058:        proyecto.ofertas = [Oferta.from_dict(o) for o in ofertas_data] 
1062:        proyecto.liquidacion = DatosLiquidacion.from_dict(liquidacion_data) 
1091:    def from_dict(cls, data: Dict[str, Any]) -> 'ConfiguracionUI': 
5:import os 
6:from dataclasses import dataclass, field 
7:from typing import List, Optional, Dict, Any 
8:from datetime import datetime, date, time 
9:from enum import Enum 
38:        import re 
84:    importe: float 
93:        if self.importe < 0: 
94:            raise ValueError("El importe no puede ser negativo") 
103:            self.importe > 0 and  
109:        return self.importe * porcentaje 
113:        return self.importe * (1 + porcentaje) 
119:            'importe': self.importe, 
137:            importe=data.get('importe', 0.0), 
152:    importe_licitacion: float = 0.0 
153:    importe_iva: float = 0.0 
154:    importe_total: float = 0.0 
158:    # Fechas importantes 
175:        """Calcula el IVA del importe de licitación""" 
176:        iva = self.importe_licitacion * porcentaje 
177:        self.importe_iva = iva 
182:        total = self.importe_licitacion * (1 + porcentaje) 
183:        self.importe_total = total 
203:        return self.importe_licitacion <= self.obtener_limite_contratacion() 
211:            'importe_licitacion': self.importe_licitacion, 
212:            'importe_iva': self.importe_iva, 
213:            'importe_total': self.importe_total, 
242:            importe_licitacion=data.get('importe_licitacion', 0.0), 
243:            importe_iva=data.get('importe_iva', 0.0), 
244:            importe_total=data.get('importe_total', 0.0), 
258:    importe_licitado: float = 0.0 
259:    importe_facturado: float = 0.0 
260:    importe_penalizaciones: float = 0.0 
271:        self.diferencia = abs(self.importe_licitado - self.importe_facturado - self.importe_penalizaciones) 
276:        if self.importe_licitado > 0: 
277:            self.porcentaje_ejecutado = (self.importe_facturado / self.importe_licitado) * 100 
284:        diferencia = self.importe_licitado - self.importe_facturado + self.importe_penalizaciones 
307:            'importe_licitado': self.importe_licitado, 
308:            'importe_facturado': self.importe_facturado, 
309:            'importe_penalizaciones': self.importe_penalizaciones, 
326:            importe_licitado=data.get('importe_licitado', 0.0), 
327:            importe_facturado=data.get('importe_facturado', 0.0), 
328:            importe_penalizaciones=data.get('importe_penalizaciones', 0.0), 
370:        oferta_minima = min(ofertas_validas, key=lambda x: x.importe) 
378:        """Obtiene la oferta con menor importe""" 
382:        return min(ofertas_validas, key=lambda x: x.importe) 
389:        """Verifica si hay múltiples ofertas con el mismo importe mínimo""" 
396:            if o.es_valida() and abs(o.importe - oferta_minima.importe) < 0.01 
410:                    importe=empresa.oferta or 0.0, 
419:        # Actualizar importes en empresas 
423:                    empresa.oferta = oferta.importe 
588:        'ofertas_duplicadas': 'Hay múltiples ofertas con el mismo importe mínimo', 
593:        'limite_excedido': 'El importe excede el límite de contratación' 
628:    import re 
633:def formatear_importe_espanol(importe: float, incluir_simbolo: bool = True) -> str: 
634:    """Formatea un importe en formato español""" 
635:    if importe >= 1000: 
637:        formatted = f"{importe:,.2f}" 
641:        formatted = f"{importe:.2f}".replace(".", ",") 
648:def parsear_importe_espanol(texto: str) -> float: 
649:    """Parsea un importe en formato español a float""" 
669:    importe: float 
678:        if self.importe < 0: 
679:            raise ValueError("El importe no puede ser negativo") 
688:            self.importe > 0 and  
694:        return self.importe * porcentaje 
698:        return self.importe * (1 + porcentaje) 
704:            'importe': self.importe, 
722:            importe=data.get('importe', 0.0), 
737:    importe_licitacion: float = 0.0 
738:    importe_iva: float = 0.0 
739:    importe_total: float = 0.0 
743:    # Fechas importantes 
760:        """Calcula el IVA del importe de licitación""" 
761:        iva = self.importe_licitacion * porcentaje 
762:        self.importe_iva = iva 
767:        total = self.importe_licitacion * (1 + porcentaje) 
768:        self.importe_total = total 
788:        return self.importe_licitacion <= self.obtener_limite_contratacion() 
796:            'importe_licitacion': self.importe_licitacion, 
797:            'importe_iva': self.importe_iva, 
798:            'importe_total': self.importe_total, 
827:            importe_licitacion=data.get('importe_licitacion', 0.0), 
828:            importe_iva=data.get('importe_iva', 0.0), 
829:            importe_total=data.get('importe_total', 0.0), 
843:    importe_licitado: float = 0.0 
844:    importe_facturado: float = 0.0 
845:    importe_penalizaciones: float = 0.0 
856:        self.diferencia = abs(self.importe_licitado - self.importe_facturado - self.importe_penalizaciones) 
861:        if self.importe_licitado > 0: 
862:            self.porcentaje_ejecutado = (self.importe_facturado / self.importe_licitado) * 100 
869:        diferencia = self.importe_licitado - self.importe_facturado + self.importe_penalizaciones 
892:            'importe_licitado': self.importe_licitado, 
893:            'importe_facturado': self.importe_facturado, 
894:            'importe_penalizaciones': self.importe_penalizaciones, 
911:            importe_licitado=data.get('importe_licitado', 0.0), 
912:            importe_facturado=data.get('importe_facturado', 0.0), 
913:            importe_penalizaciones=data.get('importe_penalizaciones', 0.0), 
955:        oferta_minima = min(ofertas_validas, key=lambda x: x.importe) 
965:        """Verifica si hay múltiples ofertas con el mismo importe mínimo""" 
972:            if o.es_valida() and abs(o.importe - oferta_minima.importe) < 0.01 
986:                    importe=empresa.oferta or 0.0, 
995:        # Actualizar importes en empresas 
999:                    empresa.oferta = oferta.importe 
1164:        'ofertas_duplicadas': 'Hay múltiples ofertas con el mismo importe mínimo', 
1169:        'limite_excedido': 'El importe excede el límite de contratación' 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_actuaciones_facturas.py 
================================== 
 
25:class DialogoActuacion(QDialog): 
136:class DialogoActuacionMail(DialogoActuacion): 
183:class DialogoFactura(QDialog): 
356:class ControladorActuacionesFacturas: 
1649:                QMessageBox.warning(self.main_window, "Error", f"No se encontró el archivo:\n{ruta_pdf}") 
28:    def __init__(self, parent=None, actuacion_data=None): 
37:    def setup_ui(self): 
91:    def agregar_pdf(self): 
103:    def quitar_pdf(self): 
110:    def cargar_datos(self, datos): 
123:    def obtener_datos(self): 
139:    def __init__(self, parent=None, actuacion_data=None): 
143:    def setup_ui(self): 
169:    def obtener_datos(self): 
176:    def cargar_datos(self, datos): 
186:    def __init__(self, parent=None, factura_data=None, actuaciones_disponibles=None): 
196:    def setup_ui(self): 
268:    def asociar_actuacion(self): 
283:    def agregar_pdf(self): 
295:    def quitar_pdf(self): 
302:    def cargar_datos(self, datos): 
331:    def obtener_datos(self): 
359:    def __init__(self, main_window): 
387:    def setup_connections_facturas(self): 
407:    def setup_tables(self): 
440:    def set_proyecto_actual(self, nombre_proyecto, contract_data=None): 
456:    def _ejecutar_con_carpeta(self, accion_callback, nombre_accion="Acción"): 
484:    def _cargar_datos_desde_json(self): 
504:    def _actualizar_tabla_actuaciones(self): 
517:    def _actualizar_tabla_facturas(self): 
529:    def _actualizar_labels_presupuesto(self): 
551:    def _actualizar_graficos(self): 
555:    def _actualizar_estado_botones(self): 
562:    def agregar_actuacion(self): 
566:    def agregar_factura(self): 
570:    def borrar_actuacion(self): 
574:    def borrar_factura(self): 
578:    def editar_actuacion_doble_clic(self, row, column): 
582:    def editar_factura_doble_clic(self, row, column): 
588:    def crear_carpeta_proyecto(self): 
602:    def _actualizar_labels_presupuesto(self): 
651:    def _actualizar_graficos(self): 
659:    def _actualizar_estado_botones(self): 
681:    def _buscar_carpeta_existente(self, controlador_archivos, nombre_proyecto, numero_expediente, alias, nombre_carpeta): 
695:    def obtener_carpeta_proyecto(self, crear_si_no_existe=False): 
758:    # def _crear_carpeta_automatica(self, nombre_proyecto, numero_expediente, alias, nombre_carpeta): 
829:    # def _limpiar_nombre_para_carpeta(self, nombre): 
844:    # def _verificar_y_crear_subcarpetas(self, ruta_carpeta): 
867:    def _actualizar_json_con_carpeta(self, datos_proyecto, ruta_carpeta): 
899:    def mostrar_dialogo_crear_contrato(self): 
953:    def _verificar_subcarpetas_estandar(self): 
972:    def _mostrar_dialogo_carpeta_no_encontrada(self): 
998:    def _crear_estructura_carpetas_obra(self): 
1057:    def borrar_actuacion(self): 
1089:    def borrar_factura(self): 
1121:    def limpiar_proyecto_actual(self): 
1137:    def cargar_datos_desde_json(self, datos_proyecto: Dict[str, Any]): 
1142:    def actualizar_labels_presupuesto(self): 
1177:    def _obtener_presupuesto_adjudicacion(self) -> float: 
1207:    def copiar_archivos_pdf(self, archivos_originales, tipo_carpeta): 
1279:    def _actualizar_label_presupuesto_total(self, importe: float): 
1290:    def _actualizar_label_presupuesto_gastado(self, importe: float): 
1298:    def _actualizar_label_presupuesto_disponible(self, importe: float): 
1313:    def _limpiar_labels_presupuesto(self): 
1322:    def _actualizar_grafico_quesito(self, presupuesto_total: float, presupuesto_gastado: float): 
1402:    def _mostrar_grafico_sin_datos(self): 
1446:    def agregar_actuacion(self): 
1471:    def agregar_actuacion_mail(self): 
1500:    def enviar_email_actuacion(self, datos): 
1533:    def agregar_factura(self): 
1563:    def actualizar_asociaciones_actuaciones(self, datos_factura: Dict[str, Any]): 
1575:    def actualizar_tabla_actuaciones(self): 
1600:    def cambiar_pdfs_factura(self, fila: int): 
1625:    def abrir_pdf_seleccionado(self, lista_widget, pdfs_list): 
1636:                # Abrir PDF con aplicación por defecto 
1655:    def guardar_en_json(self): 
1696:    def actualizar_tabla_actuaciones(self): 
1779:    def actualizar_tabla_facturas(self): 
1863:    def ver_pdfs_actuacion(self, fila: int): 
1906:    def ver_pdfs_factura(self, fila: int): 
1949:    def cambiar_pdfs_actuacion(self, fila: int): 
1974:    def cambiar_pdfs_factura(self, fila: int): 
1981:    def editar_actuacion_doble_clic(self, row, column): 
2038:    def editar_factura_doble_clic(self, row, column): 
2112:    def cargar_datos(self, datos): 
2131:    def limpiar_asociaciones_factura_actuaciones(self, factura_id: str, actuaciones_anteriores: List[str]): 
2145:    def crear_carpeta_proyecto(self): 
2159:    def _ejecutar_con_carpeta(self, accion_callback, nombre_accion="Acción"): 
2182:    def abrir_carpeta_actuaciones(self): 
2184:        def abrir_carpeta(carpeta_path): 
12:from datetime import datetime 
13:from typing import Dict, Any, List, Optional 
14:from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QFormLayout,  
19:from PyQt5.QtCore import QMargins 
20:from PyQt5.QtCore import Qt 
21:from .dialogo_gestionar_contratos import DialogoCrearContrato, DialogoBorrarContrato 
22:from PyQt5.QtChart import QChart, QChartView, QPieSeries, QPieSlice 
23:from PyQt5.QtGui import QPainter, QColor 
923:                        self.contract_manager.load_contracts_from_json() 
1256:                    from datetime import datetime 
1385:            from PyQt5.QtWidgets import QGraphicsScene 
1433:            from PyQt5.QtWidgets import QGraphicsScene 
1877:            from PyQt5.QtWidgets import QDialog, QVBoxLayout, QListWidget, QPushButton, QHBoxLayout 
1920:            from PyQt5.QtWidgets import QDialog, QVBoxLayout, QListWidget, QPushButton, QHBoxLayout 
8:import os 
9:import json 
10:import subprocess 
11:import webbrowser 
12:from datetime import datetime 
13:from typing import Dict, Any, List, Optional 
14:from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QFormLayout,  
19:from PyQt5.QtCore import QMargins 
20:from PyQt5.QtCore import Qt 
21:from .dialogo_gestionar_contratos import DialogoCrearContrato, DialogoBorrarContrato 
22:from PyQt5.QtChart import QChart, QChartView, QPieSeries, QPieSlice 
23:from PyQt5.QtGui import QPainter, QColor 
211:        self.le_importe = QLineEdit() 
212:        self.le_importe.setPlaceholderText("0.00") 
213:        form_layout.addRow("Importe (€):", self.le_importe) 
305:        self.le_importe.setText(str(datos.get('importe', '0.00'))) 
340:        # Convertir importe a float 
342:            importe = float(self.le_importe.text().replace(',', '.')) 
344:            importe = 0.0 
348:            'importe': importe, 
427:            headers_facturas = ["Nombre", "Importe (€)", "Actuaciones Asociadas", "Acciones"] 
434:            header.setSectionResizeMode(1, QHeaderView.ResizeToContents)  # Importe 
526:            self.table_facturas.setItem(i, 1, QTableWidgetItem(f"{factura.get('importe', 0):.2f}")) 
536:            presupuesto_gastado = sum(float(f.get('importe', 0)) for f in self.facturas) 
622:                    importe = factura.get('importe', 0) 
623:                    if isinstance(importe, str): 
624:                        importe = float(importe) 
625:                    total_gastado += importe 
824:    #         import traceback 
831:    #     import re 
914:                    # IMPORTANTE: Recargar COMPLETAMENTE el contract manager 
950:            import traceback 
1153:            total_gastado = sum(factura.get('importe', 0.0) for factura in self.facturas) 
1188:            campos_posibles = ['basePresupuesto', 'importe_adjudicacion', 'importe_licitacion', 'presupuesto'] 
1256:                    from datetime import datetime 
1264:                    import shutil 
1279:    def _actualizar_label_presupuesto_total(self, importe: float): 
1282:            if importe > 0: 
1283:                texto = f"{importe:,.2f} €".replace(',', '.') 
1290:    def _actualizar_label_presupuesto_gastado(self, importe: float): 
1293:            texto = f"{importe:,.2f} €".replace(',', '.') 
1294:            color = "red" if importe > 0 else "gray" 
1298:    def _actualizar_label_presupuesto_disponible(self, importe: float): 
1301:            texto = f"{importe:,.2f} €".replace(',', '.') 
1302:            if importe > 0: 
1304:            elif importe < 0: 
1306:                texto = f"-{abs(importe):,.2f} €".replace(',', '.') 
1385:            from PyQt5.QtWidgets import QGraphicsScene 
1433:            from PyQt5.QtWidgets import QGraphicsScene 
1524:            import urllib.parse 
1637:                import subprocess 
1638:                import platform 
1694:            import traceback 
1835:            importe = factura.get('importe', 0.0) 
1836:            self.table_facturas.setItem(row, 1, QTableWidgetItem(f"{importe:.2f} €")) 
1877:            from PyQt5.QtWidgets import QDialog, QVBoxLayout, QListWidget, QPushButton, QHBoxLayout 
1920:            from PyQt5.QtWidgets import QDialog, QVBoxLayout, QListWidget, QPushButton, QHBoxLayout 
2011:                # Conservar datos importantes del original 
2068:                # Conservar datos importantes del original 
2187:                import subprocess 
2188:                import platform 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_archivos_unificado.py 
================================== 
 
147:class GestorArchivos: 
17:   💥 PROBLEMA: La misma clase está definida 2 veces completas 
18:   🔧 SOLUCIÓN: Eliminar la primera definición (líneas 19-258) 
150:    def __init__(self, main_window=None): 
155:    def set_main_window(self, main_window): 
163:    def _auto_detectar_directorio_obras(self): 
188:    def debug_rutas_completo(self): 
203:    def buscar_carpeta_existente(self, contract_data): 
224:            # CRITERIO 0: nombreCarpeta explícito (preferente si está bien definido) 
273:    def renombrar_carpeta_por_expediente(self): 
383:                msg.setDefaultButton(btn_abrir) 
446:    def _limpiar_texto_busqueda(self, texto): 
460:    def _calcular_similitud_texto(self, texto1, texto2): 
480:    def verificar_o_crear_carpeta(self, contract_data, modo="auto", force_create=False): 
538:    def _preguntar_crear_carpeta(self, contract_data): 
556:            msg.setDefaultButton(QMessageBox.Yes) 
563:            return True  # En caso de error, crear por defecto 
565:    def _crear_carpeta_con_estructura(self, contract_data): 
589:    def _crear_estructura_subcarpetas(self, carpeta_path, contract_data): 
592:            # Definir estructura de carpetas mejorada 
676:    def _generar_nombre_carpeta(self, contract_data): 
707:    def _limpiar_nombre_carpeta(self, nombre): 
751:    def _generar_nombre_unico(self, nombre_base): 
779:    def _actualizar_json_con_carpeta(self, contract_data, nombre_carpeta): 
877:    def _get_json_path(self): 
914:    def _mostrar_notificacion_carpeta_creada(self, contract_data, carpeta_path): 
956:    def _find_main_window(self): 
978:    def abrir_carpeta_en_explorador(self, carpeta_path): 
1001:    def abrir_carpeta_contrato(self, contract_data): 
1019:    def listar_carpetas_huerfanas(self): 
1058:    def generar_informe_carpetas(self): 
1131:    def migrar_desde_controlador_anterior(self): 
1160:    def obtener_carpeta_obra(self, contract_data, crear_si_no_existe=True): 
1166:    def crear_carpeta_obra(self, contract_data, preguntar=True): 
1172:    def existe_carpeta_obra(self, contract_data): 
1184:def get_gestor_global(main_window=None): 
1193:def verificar_o_crear_carpeta_obra(contract_data, crear_si_no_existe=True, main_window=None): 
1198:def abrir_carpeta_obra(contract_data, main_window=None): 
141:from typing import Optional, Tuple, List 
142:from datetime import datetime 
143:from PyQt5.QtWidgets import QMessageBox, QApplication 
144:from PyQt5.QtCore import QTimer 
289:            from PyQt5.QtWidgets import QMessageBox 
136:import os 
137:import re,sys 
138:import json 
139:import subprocess 
140:import platform 
141:from typing import Optional, Tuple, List 
142:from datetime import datetime 
143:from PyQt5.QtWidgets import QMessageBox, QApplication 
144:from PyQt5.QtCore import QTimer 
196:            import traceback 
268:            import traceback 
288:            import re 
289:            from PyQt5.QtWidgets import QMessageBox 
437:            import traceback 
534:            import traceback 
585:            import traceback 
668:            import traceback 
874:            import traceback 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_autosave.py 
================================== 
 
12:class ControladorAutoGuardado: 
15:    def __init__(self, main_window): 
31:    def set_dependencies(self, controlador_json, contract_manager): 
37:    def iniciar_carga_datos(self): 
43:    def finalizar_carga_datos(self): 
49:    def configurar_auto_guardado_completo(self): 
62:    def configurar_auto_guardado_campos(self): 
106:    def _crear_callback_agrupado(self, nombre_campo, widget): 
108:        def callback(*args): 
112:    def _agendar_guardado_campo(self, nombre_campo: str, widget): 
138:    def _ejecutar_guardado_agrupado(self): 
181:    def _es_campo_firmante(self, nombre_campo: str) -> bool: 
191:    def _configurar_textedit_con_delay_optimizado(self, widget, nombre): 
197:        def on_text_changed(): 
205:    def configurar_auto_guardado_tablas(self): 
225:    def _configurar_tabla_con_delay(self, nombre_tabla, callback): 
234:        def on_item_changed(item): 
242:    def _guardar_firmante_global(self, nombre_campo: str, valor: str) -> bool: 
263:    def _guardar_campo_obra(self, nombre_campo: str, valor: str, widget) -> bool: 
294:    def _auto_guardar_tabla_empresas(self): 
323:    def _auto_guardar_tabla_ofertas(self): 
328:    def forzar_guardado_completo(self): 
355:    def _extraer_valor_widget(self, widget) -> Optional[str]: 
380:    def _extraer_datos_tabla_empresas(self) -> list: 
425:    def _extraer_datos_tabla_ofertas(self) -> list: 
460:    def _verificar_dependencias(self) -> bool: 
473:    def _forzar_guardado_tablas(self): 
485:    def esta_pausado(self) -> bool: 
489:    def get_stats_widgets_configurados(self) -> dict: 
514:    def _obtener_nombre_contrato_actual(self) -> str: 
525:    def guardar_tabla_ofertas_en_json(self): 
536:                print("[AutoGuardado] ❌ No se pudo guardar ofertas: contrato no definido") 
7:from PyQt5 import QtWidgets 
8:from PyQt5.QtCore import QTimer 
9:from typing import Optional 
7:from PyQt5 import QtWidgets 
8:from PyQt5.QtCore import QTimer 
9:from typing import Optional 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_backup.py 
================================== 
 
14:class ControladorBackup: 
17:    def __init__(self, base_path: str = None): 
69:    def crear_backup_inicial(self) -> bool: 
125:    def _obtener_backups_existentes(self) -> List[tuple]: 
158:    def _eliminar_backups_antiguos(self, backups_existentes: List[tuple], cantidad_a_eliminar: int): 
184:    def _mostrar_estado_backups(self, backups: List[tuple]): 
209:    def listar_backups_disponibles(self) -> List[dict]: 
241:    def restaurar_backup(self, nombre_backup: str) -> bool: 
281:    def validar_integridad_backup(self, nombre_backup: str) -> bool: 
323:def crear_backup_automatico(base_path: str = None) -> bool: 
9:from datetime import datetime 
10:from typing import List, Optional 
26:            from .controlador_routes import ControladorRutas 
6:import os 
7:import shutil 
8:import json 
9:from datetime import datetime 
10:from typing import List, Optional 
11:import re 
26:            from .controlador_routes import ControladorRutas 
37:        except ImportError: 
38:            # 🔧 FALLBACK: Lógica antigua si no se puede importar ControladorRutas 
39:            print(f"[ControladorBackup] ⚠️ Fallback: No se pudo importar ControladorRutas") 
43:            import sys 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_calculos.py 
================================== 
 
8:class ControladorCalculos: 
11:    def __init__(self): 
18:    def calcular_iva_base_presupuesto(self, window): 
94:    def calcular_iva_adjudicacion(self, window): 
176:    def calcular_certificacion_completa(self, window): 
195:    def calcular_liquidacion(self, window): 
321:    # __init__ duplicado eliminado - ya está definido al inicio de la clase 
323:    def _agregar_campo_pendiente(self, nombre_campo: str, valor: str): 
327:    def _guardar_lote_completo(self, window) -> bool: 
363:    def _guardar_campo_calculado_en_json(self, window, nombre_campo: str, valor: str) -> bool: 
371:    def calcular_ofertas_completo(self, window): 
540:    def actualizar_justificacion_limites(self, window): 
587:    def sincronizar_empresas_ofertas(self, main_window): 
615:    def _sincronizar_tabla_ofertas_unificada(self, tabla_ofertas, empresas_lista): 
644:    def validar_datos_empresas(self, window, fila, valor): 
661:    def _obtener_valor_en_otra_columna(self, tabla, valor_buscado, col_buscar=0, col_devolver=3): 
673:    def _contar_ofertas_validas(self, tabla): 
692:    def _obtener_precio_mas_bajo(self, tabla): 
722:    def _obtener_nombre_empresa_menor_oferta(self, tabla): 
790:    def _convertir_texto_a_numero(self, texto): 
826:    def _verificar_ofertas_duplicadas(self, tabla): 
851:    def _establecer_valor_widget(self, widget, valor): 
885:    def _obtener_valor_widget(self, widget): 
932:    def pausar_calculos(self): 
937:    def reanudar_calculos(self): 
942:    def esta_calculando(self): 
948:    def calcular_anualidades(self, window): 
975:            mes_inicio = 1  # Por defecto enero 
5:from typing import Optional 
621:            from PyQt5.QtWidgets import QTableWidgetItem 
622:            from PyQt5.QtCore import Qt 
648:            from helpers_py import es_numero_valido 
5:from typing import Optional 
88:            import traceback 
171:            import traceback 
316:            import traceback 
535:            import traceback 
562:                texto = f"El contrato de la obra es por importe de {base_presupuesto:,.2f} euros, no superando por tanto el límite de 40.000 € establecido." 
564:                texto = f"El contrato de servicios es por importe de {base_presupuesto:,.2f} euros, no superando por tanto el límite de 15.000 € establecido." 
566:                texto = f"El contrato es por importe de {base_presupuesto:,.2f} euros." 
621:            from PyQt5.QtWidgets import QTableWidgetItem 
622:            from PyQt5.QtCore import Qt 
648:            from helpers_py import es_numero_valido 
786:            import traceback 
1051:            import traceback 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_contratos.py 
================================== 
 
10:class ControladorContratos: 
13:    def __init__(self, main_window): 
20:    def _conectar_callbacks(self): 
33:    def on_contract_type_changed(self, tipo_contrato): 
57:    def activar_modo_servicios(self): 
65:    def activar_modo_obras(self): 
73:    def activar_modo_mantenimiento(self): 
87:    def activar_modo_facturas(self): 
106:    def activar_modo_facturas_externas(self): 
128:    def get_current_contract_manager(self): 
132:    def get_current_contract_data(self): 
138:    def reload_contracts_list(self): 
151:    def get_current_contract_name(self): 
157:    def is_contract_manager_ready(self): 
161:    def get_contracts_count(self): 
169:    def force_contract_selection(self, contract_name: str = None): 
6:from PyQt5.QtWidgets import QMessageBox 
7:from PyQt5 import QtWidgets 
5:import os 
6:from PyQt5.QtWidgets import QMessageBox 
7:from PyQt5 import QtWidgets 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_documentos.py 
================================== 
 
29:class ControladorDocumentos: 
163:    def _notificar_documento_generado(self, documento_id: str, ruta_archivo: str): 
191:    def _detectar_tipo_documento(self, documento_id: str, ruta_archivo: str) -> str: 
220:        print(f"[ControladorDocumentos] 🔍 Verificando nombre archivo: {nombre_archivo}") 
224:                if palabra in nombre_archivo: 
225:                    print(f"[ControladorDocumentos] ✅ Tipo detectado por archivo: {tipo} (coincidencia: {palabra})") 
275:    def _generar_documento_con_sustitucion_tracked(self, tipo_funcion: str, contract_data: Dict[str, Any], nombre_archivo: str): 
553:    def _generar_documento_simple(self, tipo_funcion: str, nombre_archivo: str, titulo: str): 
611:    def _generar_documento_con_sustitucion(self, tipo_funcion: str, contract_data: Dict[str, Any], nombre_archivo: str) -> bool: 
1091:    def _abrir_documento(self, ruta_archivo: str): 
32:    def __init__(self, main_window=None): 
73:    def _configurar_gestor_unificado(self): 
83:    def _configurar_tracker_documentos(self): 
94:    def _iniciar_tracking_documento(self, tipo_documento, nombre_documento, plantilla=""): 
110:    def _completar_tracking_documento(self, documento_id, ruta_archivo, observaciones=""): 
133:    def _actualizar_fase_en_generacion(self, tipo_documento: str): 
163:    def _notificar_documento_generado(self, documento_id: str, ruta_archivo: str): 
191:    def _detectar_tipo_documento(self, documento_id: str, ruta_archivo: str) -> str: 
245:    def _error_tracking_documento(self, documento_id, error): 
259:    def _mapear_tipo_documento(self, tipo_funcion: str): 
275:    def _generar_documento_con_sustitucion_tracked(self, tipo_funcion: str, contract_data: Dict[str, Any], nombre_archivo: str): 
305:    def _obtener_carpeta_contrato_actual(self): 
323:    def _obtener_carpeta_con_gestor_unificado(self, contract_data): 
346:    def _determinar_subcarpeta_por_tipo_documento(self, tipo_funcion): 
382:    def set_main_window(self, main_window): 
386:    def _obtener_nombre_plantilla_dinamico(self, tipo_funcion: str) -> str: 
421:    def generar_acta_inicio(self): 
443:    def generar_cartas_invitacion(self): 
497:    def generar_acta_adjudicacion(self): 
501:    def _limpiar_nombre_archivo(self, nombre): 
513:    def generar_acta_liquidacion(self): 
517:    def generar_acta_replanteo(self): 
521:    def generar_acta_recepcion(self): 
525:    def generar_nombramiento_director(self): 
529:    def generar_contrato(self): 
553:    def _generar_documento_simple(self, tipo_funcion: str, nombre_archivo: str, titulo: str): 
583:                    f"Generado exitosamente usando {plantilla or 'plantilla por defecto'}" 
611:    def _generar_documento_con_sustitucion(self, tipo_funcion: str, contract_data: Dict[str, Any], nombre_archivo: str) -> bool: 
667:    def _sustituir_variables_en_documento(self, ruta_plantilla: str, archivo_salida: str, contract_data: Dict[str, Any]) -> bool: 
762:    def _obtener_empresas_lista(self, contract_data: Dict[str, Any]) -> List[Dict]: 
782:    def _detectar_variables_en_plantilla(self, ruta_plantilla: str) -> set: 
818:    def _verificar_campos_vacios(self, variables_plantilla: set, datos_disponibles: dict) -> list: 
860:    def _mostrar_popup_campos_vacios(self, campos_vacios: list, nombre_documento: str) -> bool: 
883:            msg.setDefaultButton(QMessageBox.No) 
905:    def _preparar_datos_para_sustitucion(self, contract_data, usar_firmantes_globales=True): 
986:                            #print(f"[DEBUG] 🔧 {campo} DEFINITIVO: '{resultado}' (con caracteres invisibles)") 
1027:    def _crear_o_obtener_carpeta_contrato(self, contract_data: Dict[str, Any]) -> Optional[str]: 
1057:    def _obtener_ruta_plantilla(self, nombre_plantilla: str) -> Optional[str]: 
1077:    def _limpiar_nombre_para_archivo(self, nombre): 
1091:    def _abrir_documento(self, ruta_archivo: str): 
1104:    def _abrir_cartas_generadas(self, cartas_generadas): 
1115:    def _validar_contrato_seleccionado(self) -> bool: 
1133:    def _obtener_datos_contrato_actual(self) -> Optional[Dict[str, Any]]: 
1189:    def _mostrar_error(self, mensaje: str): 
1194:    def _mostrar_dialogo_conversion_pdf(self, titulo: str, ruta_docx: str): 
1217:    def _mostrar_resultado_cartas(self, cartas_generadas, contract_data, tipo_carta): 
1247:    def formatear_numero_para_documento(numero: float) -> str: 
1254:    def validar_plantilla_existe(nombre_plantilla: str) -> bool: 
1265:    def _sustituir_marcadores_tabla(self, doc: Document, empresas_lista: List[Dict]): 
1328:    def obtener_empresas_para_docx(self, contract_data): 
1359:    def _formatear_oferta_euros(self, oferta_str): 
1372:    def _migrar_estructura_para_docx(self, empresas_dict, contract_data): 
1403:    def _insertar_tabla_empresas(self, doc: Document, paragraph, empresas_lista: List[Dict]): 
1432:                # Obtener datos con valores por defecto 
1456:    def _insertar_tabla_ofertas(self, doc: Document, paragraph, empresas_lista: List[Dict]): 
1573:    def _configurar_tabla_basica(self, tabla): 
1600:    def _insertar_tabla_despues_de_parrafo(self, paragraph, tabla): 
1608:    def verificar_plantilla_disponible(self, nombre_plantilla: str) -> bool: 
1636:    def _procesar_paragraph_con_variables(self, paragraph, datos_json: Dict[str, Any]) -> set: 
1707:    def _sustituir_variables_en_texto(self, texto: str, datos_json: Dict[str, Any]) -> str: 
1739:    def _preparar_datos_carta_empresa(self, contract_data, empresa, indice_empresa): 
1770:    def generar_cartas_adjudicacion(self): 
1860:    def _preparar_datos_carta_adjudicacion(self, contract_data, empresa, indice_empresa, es_adjudicataria=False): 
1904:    def _generar_carta_individual(self, ruta_plantilla, archivo_salida, datos_carta): 
1933:    def _validar_campos_y_fechas(self, contract_data, nombre_plantilla): 
1977:    def _es_campo_fecha(self, nombre_campo): 
1988:    def _validar_fecha_rango(self, valor_fecha): 
2034:    def _mostrar_popup_validacion(self, problemas_encontrados, nombre_documento): 
2069:            msg.setDefaultButton(QMessageBox.No) 
2086:    def comprobar_generar_acta_inicio(self): 
2092:    def comprobar_generar_cartas_invitacion(self): 
2098:    def comprobar_generar_acta_adjudicacion(self): 
2104:    def comprobar_generar_cartas_adjudicacion(self): 
2110:    def comprobar_generar_acta_liquidacion(self): 
2116:    def comprobar_generar_acta_replanteo(self): 
2122:    def comprobar_generar_acta_recepcion(self): 
2128:    def comprobar_generar_nombramiento_director(self): 
2134:    def comprobar_generar_contrato(self): 
2142:    def _comprobar_y_ejecutar(self, nombre_plantilla, funcion_generar): 
2177:    def _validar_contrato_seleccionado(self): 
2195:    def _obtener_datos_contrato_actual(self): 
2220:    def _mostrar_error(self, mensaje): 
2231:    def generar_fichero_resumen(self, nombre_contrato: str, datos_contrato: dict) -> str: 
2265:    def _crear_contenido_fichero_resumen(self, nombre_contrato: str, datos_contrato: dict,  
2484:    def _insertar_cronograma_en_word(self, doc, nombre_contrato: str): 
2605:    def _guardar_fichero_resumen(self, nombre_contrato: str, documento_word) -> str: 
9:from typing import Dict, Any, List, Optional 
10:from docx import Document 
11:from docx.shared import Pt 
12:from docx.oxml.ns import qn 
13:from docx.oxml import OxmlElement 
14:from PyQt5.QtWidgets import QMessageBox 
16:from helpers_py import ( 
21:    from .controlador_pdf_unificado import mostrar_dialogo_pdf 
86:            from .controlador_resumen import TrackerDocumentos, TipoDocumento 
505:            from helpers_py import limpiar_nombre_archivo 
785:            from docx import Document 
863:            from PyQt5.QtWidgets import QMessageBox 
1060:            from .controlador_routes import rutas 
1209:                from PyQt5.QtWidgets import QMessageBox 
1576:            from docx.shared import Inches 
1991:            from datetime import datetime, timedelta 
2037:            from PyQt5.QtWidgets import QMessageBox 
2223:            from PyQt5.QtWidgets import QMessageBox 
2237:            from .controlador_resumen import TrackerDocumentos 
2269:            from datetime import datetime 
2270:            from docx import Document 
2271:            from docx.shared import Inches, Pt 
2272:            from docx.enum.text import WD_ALIGN_PARAGRAPH 
2273:            from docx.enum.table import WD_TABLE_ALIGNMENT 
2274:            from docx.oxml.shared import OxmlElement, qn 
2438:            from .controlador_resumen import TipoDocumento 
2487:            from docx.shared import Pt 
2488:            from docx.enum.text import WD_ALIGN_PARAGRAPH 
2607:        from datetime import datetime 
5:import os 
6:import re 
7:import sys, json 
8:import subprocess 
9:from typing import Dict, Any, List, Optional 
10:from docx import Document 
11:from docx.shared import Pt 
12:from docx.oxml.ns import qn 
13:from docx.oxml import OxmlElement 
14:from PyQt5.QtWidgets import QMessageBox 
16:from helpers_py import ( 
19:# Importación condicional del módulo PDF para evitar errores 
21:    from .controlador_pdf_unificado import mostrar_dialogo_pdf 
86:            from .controlador_resumen import TrackerDocumentos, TipoDocumento 
160:            import traceback 
188:            import traceback 
439:            import traceback 
505:            from helpers_py import limpiar_nombre_archivo 
507:        except ImportError: 
509:            import re 
547:            import traceback 
607:            import traceback 
752:            import traceback 
785:            from docx import Document 
789:            import re 
863:            from PyQt5.QtWidgets import QMessageBox 
1021:            import traceback 
1060:            from .controlador_routes import rutas 
1062:        except ImportError: 
1206:        except ImportError as e: 
1207:            print(f"[ControladorDocumentos] ❌ Error de importación en diálogo PDF: {e}") 
1209:                from PyQt5.QtWidgets import QMessageBox 
1214:            import traceback 
1326:            import traceback 
1503:            print(f"{'Nombre':<40} {'¿Presenta?':<12} {'Importe':<15} {'Orden':<10}") 
1507:                importe_str = f"{dato['precio']:.2f}" if dato['precio'] > 0 else "0.00" 
1508:                print(f"{nombre_corto:<40} {dato['presenta']:<12} {importe_str:<15} {dato['orden']:<10}") 
1519:            encabezados = ["Nombre", "¿PRESENTA OFERTA?", "IMPORTE DE LA OFERTA", "ORDEN CLASIFICATORIO"] 
1544:                # Columna 2: Importe 
1545:                importe_texto = f"{dato['precio']:.2f}" if dato['precio'] > 0 else "-" 
1548:                run = celda.paragraphs[0].add_run(importe_texto) 
1569:            import traceback 
1576:            from docx.shared import Inches 
1991:            from datetime import datetime, timedelta 
1992:            import re 
2037:            from PyQt5.QtWidgets import QMessageBox 
2223:            from PyQt5.QtWidgets import QMessageBox 
2237:            from .controlador_resumen import TrackerDocumentos 
2256:        except ImportError as e: 
2257:            error_msg = f"Error de importación: {e}" 
2259:            raise ImportError(error_msg) 
2269:            from datetime import datetime 
2270:            from docx import Document 
2271:            from docx.shared import Inches, Pt 
2272:            from docx.enum.text import WD_ALIGN_PARAGRAPH 
2273:            from docx.enum.table import WD_TABLE_ALIGNMENT 
2274:            from docx.oxml.shared import OxmlElement, qn 
2275:        except ImportError as e: 
2276:            raise ImportError(f"Error importando módulos de docx: {e}. Asegúrate de que python-docx esté instalado.") 
2399:        # SECCIÓN 4: INFORMACIÓN DE FECHAS IMPORTANTES 
2400:        doc.add_heading('📅 FECHAS IMPORTANTES', level=1) 
2438:            from .controlador_resumen import TipoDocumento 
2487:            from docx.shared import Pt 
2488:            from docx.enum.text import WD_ALIGN_PARAGRAPH 
2607:        from datetime import datetime 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_eventos_ui.py 
================================== 
 
12:class ControladorEventosUI: 
198:        for boton_name, metodo_name in botones_archivo: 
15:    def __init__(self, main_window): 
23:    def set_controlador_calculos(self, controlador_calculos): 
33:    def iniciar_carga_datos(self): 
37:    def finalizar_carga_datos(self): 
41:    def setup_event_handlers(self): 
76:    def _conectar_todos_los_botones(self): 
110:    def _conectar_botones_criticos(self): 
134:    def _setup_botones_navegacion(self): 
146:    def _setup_botones_documentos(self): 
163:    def _conectar_boton_documento(self, boton_name, metodo_name): 
191:    def _setup_botones_gestion_archivo(self): 
204:    def _setup_botones_gestion_empresas(self): 
214:    def _setup_botones_especiales(self): 
246:    def _conectar_boton_simple(self, boton_name, metodo_name): 
271:    def _setup_abrir_carpeta(self): 
277:                def abrir_carpeta_wrapper(): 
296:    def conectar_boton_excel(self): 
310:    def conectar_boton_actuacion_mail(self): 
324:    def on_pb_imp_exp_excel_clicked(self): 
349:    def on_crear_actuacion_mail_clicked(self): 
359:    def obtener_empresas_actuales(self): 
395:    def aplicar_empresas_importadas(self, empresas_importadas): 
424:    def _actualizar_tabla_empresas(self, empresas): 
444:    def _setup_campos_especificos(self): 
531:    def _on_precio_adjudicacion_changed(self): 
543:    def _setup_tablas_especificas(self): 
569:    def configurar_eventos_liquidacion(self, window): 
597:    def setup_justificacion_inicial(self): 
607:    def _setup_eventos_generales(self): 
625:    def _setup_widgets_generales(self): 
659:    def _on_base_presupuesto_changed(self): 
670:    def _on_cert_base_changed(self): 
680:    def _on_tw_empresas_changed(self, item): 
703:    def _guardar_tabla_empresas_en_json(self): 
781:    def _on_tw_ofertas_changed(self, item): 
801:    def _on_tab_changed(self, index): 
817:    def _ejecutar_funcion_tab(self, index, tab_name, widget_name): 
830:    def _on_field_changed(self, nombre, widget): 
840:    def _on_spinbox_changed(self, nombre, widget): 
850:    def _on_radiobutton_changed(self): 
860:    def _on_rb1_toggled(self, checked): 
879:    def _on_rb2_toggled(self, checked): 
898:    def _confirmar_cambio_tipo_contrato(self, tipo_destino): 
939:            msg.setDefaultButton(QMessageBox.Cancel) 
959:    def _on_fecha_contrato_changed(self): 
970:    def _on_plazo_ejecucion_changed(self): 
981:    def _on_combo_changed(self, nuevo_contrato: str): 
1003:    def _actualizar_cronograma_on_combo_change(self, nombre_contrato: str): 
1020:    def _ejecutar_cambio_expediente(self): 
1053:    def pausar_eventos(self): 
1058:    def reanudar_eventos(self): 
1063:    def esta_pausado(self) -> bool: 
1067:    def configurar_eventos_perdida_foco(self): 
1082:                            def create_focus_out_handler(w, orig_handler): 
1083:                                def handler(event): 
1099:    def verificar_conexiones_botones(self): 
1159:    def cargar_empresas_desde_json(self, nombre_contrato): 
6:from PyQt5.QtWidgets import QLineEdit, QTextEdit, QTableWidgetItem, QDateEdit, QTimeEdit, QDoubleSpinBox, QSpinBox, QComboBox, QTableWidget, QMessageBox 
7:from PyQt5.QtCore import Qt, QTimer 
8:from PyQt5 import QtCore 
9:from typing import Optional 
327:            from PyQt5.QtWidgets import QMenu 
328:            from PyQt5.QtCore import QPoint 
329:            from controladores.ventana_doble_tabla import gestionar_importacion_exportacion_excel 
6:from PyQt5.QtWidgets import QLineEdit, QTextEdit, QTableWidgetItem, QDateEdit, QTimeEdit, QDoubleSpinBox, QSpinBox, QComboBox, QTableWidget, QMessageBox 
7:from PyQt5.QtCore import Qt, QTimer 
8:from PyQt5 import QtCore 
9:from typing import Optional 
73:            import traceback 
325:        """Disparador del botón Importar/Exportar Excel""" 
327:            from PyQt5.QtWidgets import QMenu 
328:            from PyQt5.QtCore import QPoint 
329:            from controladores.ventana_doble_tabla import gestionar_importacion_exportacion_excel 
332:            accion_importar = menu.addAction("Importar desde Excel") 
341:            if accion_elegida == accion_importar: 
342:                gestionar_importacion_exportacion_excel(self.main_window, "importar") 
344:                gestionar_importacion_exportacion_excel(self.main_window, "exportar") 
395:    def aplicar_empresas_importadas(self, empresas_importadas): 
396:        """Aplica empresas importadas al sistema""" 
400:                tabla.setRowCount(len(empresas_importadas)) 
402:                for fila, empresa in enumerate(empresas_importadas): 
415:                        contrato_actual, empresas_importadas 
1218:            import traceback 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_fases_documentos.py 
================================== 
 
12:class FaseDocumento(Enum): 
24:class ControladorFasesDocumentos: 
27:    def __init__(self, main_window=None): 
97:    def forzar_actualizar_cartas(self, nombre_contrato: str): 
107:    def conectar_campos_ui(self): 
132:    def cargar_fases_desde_json(self, nombre_contrato: str): 
166:    def marcar_documento_generado(self, tipo_documento: str, nombre_contrato: str = None): 
219:    def marcar_creacion_proyecto(self, nombre_contrato: str): 
228:    def obtener_resumen_progreso(self, nombre_contrato: str) -> Dict: 
266:    def obtener_historial_actividad(self, nombre_contrato: str, limite: int = 10) -> List[Dict]: 
307:    def _actualizar_fecha_generado(self, nombre_contrato: str, fase: FaseDocumento, fecha: str): 
332:    def _on_fecha_firmado_cambiada(self, fase: FaseDocumento, fecha): 
350:    def _actualizar_campos_ui(self, fases_datos: Dict): 
383:    def _actualizar_json(self, nombre_contrato: str, fase: str, tipo: str, fecha: str): 
410:    def reparar_sincronizacion_fases(self, nombre_contrato: str): 
497:    def sincronizar_todas_fechas_a_json(self, nombre_contrato: str): 
529:                    # Solo actualizar si no es la fecha por defecto (2000-01-01) 
540:                    # Solo actualizar si no es la fecha por defecto (2000-01-01) 
553:    def obtener_datos_fases_para_resumen(self, nombre_contrato: str) -> Dict: 
582:    def _obtener_datos_contrato(self, nombre_contrato: str) -> Optional[Dict]: 
606:    def _guardar_datos_contrato(self, nombre_contrato: str, datos_contrato: Dict): 
660:def integrar_controlador_fases(main_window): 
695:def integrar_sistema_completo_fases_resumen(main_window): 
8:from datetime import datetime 
9:from typing import Dict, Optional, List 
10:from enum import Enum 
114:            from PyQt5.QtWidgets import QDateEdit 
115:            from PyQt5.QtCore import QDate 
315:                from PyQt5.QtWidgets import QDateEdit 
316:                from PyQt5.QtCore import QDate 
323:                    fecha_qt = QDate.fromString(fecha, "yyyy-MM-dd") 
356:            from PyQt5.QtWidgets import QDateEdit 
357:            from PyQt5.QtCore import QDate 
367:                    fecha_gen = QDate.fromString(fase_data["generado"], "yyyy-MM-dd") 
376:                    fecha_fir = QDate.fromString(fase_data["firmado"], "yyyy-MM-dd") 
430:            from PyQt5.QtWidgets import QDateEdit 
431:            from PyQt5.QtCore import QDate 
458:                        fecha_qt = QDate.fromString(fecha_gen_json, "yyyy-MM-dd") 
479:                        fecha_qt = QDate.fromString(fecha_fir_json, "yyyy-MM-dd") 
503:            from PyQt5.QtWidgets import QDateEdit 
504:            from PyQt5.QtCore import QDate 
705:            from controladores.controlador_resumen import integrar_resumen_completo 
746:    print("   from controladores.controlador_fases_documentos import integrar_controlador_fases") 
6:import os 
7:import json 
8:from datetime import datetime 
9:from typing import Dict, Optional, List 
10:from enum import Enum 
114:            from PyQt5.QtWidgets import QDateEdit 
115:            from PyQt5.QtCore import QDate 
216:            import traceback 
315:                from PyQt5.QtWidgets import QDateEdit 
316:                from PyQt5.QtCore import QDate 
356:            from PyQt5.QtWidgets import QDateEdit 
357:            from PyQt5.QtCore import QDate 
430:            from PyQt5.QtWidgets import QDateEdit 
431:            from PyQt5.QtCore import QDate 
494:            import traceback 
503:            from PyQt5.QtWidgets import QDateEdit 
504:            from PyQt5.QtCore import QDate 
655:            import traceback 
705:            from controladores.controlador_resumen import integrar_resumen_completo 
708:        except ImportError: 
746:    print("   from controladores.controlador_fases_documentos import integrar_controlador_fases") 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_grafica.py 
================================== 
 
40:class ControladorGrafica(QMainWindow): 
1221:                if archivo: 
43:    def __init__(self, archivo_proyecto=None): 
76:    def _inicializar_controladores(self): 
107:    def process_arguments(self, archivo_proyecto=None): 
111:    def mousePressEvent(self, event): 
123:    def mouseMoveEvent(self, event): 
135:    def mouseReleaseEvent(self, event): 
141:    def setup_ui(self): 
155:    def _setup_contract_manager(self): 
174:    def _configurar_gestor_archivos_en_controladores(self): 
188:    def _verificar_estructura_despues_carga(self, contract_data): 
213:    def _cargar_datos_en_interfaz(self, contract_data): 
244:    def _verificar_estructura_una_vez(self, contract_data): 
265:    def _limpiar_todos_los_widgets(self): 
299:            # LIMPIAR QDateEdit (fechas) - poner fecha actual por defecto 
324:    def _inicializar_widgets_vacios(self): 
340:    def _cargar_todos_los_widgets(self, contract_data): 
395:    def _cargar_lineedit(self, widget, contract_data): 
404:    def _cargar_textedit(self, widget, contract_data): 
413:    def _cargar_doublespinbox(self, widget, contract_data): 
423:    def _cargar_spinbox(self, widget, contract_data): 
433:    def _cargar_dateedit(self, widget, contract_data): 
446:    def _cargar_timeedit(self, widget, contract_data): 
461:    def _cargar_combobox(self, widget, contract_data): 
472:    def _cargar_firmantes_optimizado(self, contract_data): 
499:    def _cargar_radiobuttons_optimizado(self, contract_data): 
517:    def _cargar_tablas_especiales(self, contract_data): 
533:    def _cargar_tabla_empresas(self, contract_data): 
568:    def on_contract_loaded(self, contract_data): 
596:    def _migrar_estructura_antigua(self, empresas_dict, contract_data): 
611:                    'ofertas': ''  # Valor por defecto 
627:    def _cargar_tabla_empresas(self, contract_data): 
672:    def _cargar_tabla_ofertas_optimizada(self, contract_data): 
718:    def _cargar_fechas(self, contract_data): 
749:    def _cargar_tipo_contrato(self, contract_data): 
762:    def _obtener_empresas_lista(self, contract_data: Dict[str, Any]) -> List[Dict]: 
773:    def _cargar_empresas_directas(self, contract_data): 
811:    def on_contract_type_changed(self, tipo_contrato): 
818:    def on_contract_cleared(self): 
826:    def update_pdf_for_current_contract(self): 
856:    def _setup_componentes_ui(self): 
899:    def _configurar_sincronizacion_tablas(self): 
910:    def _configurar_auto_guardado(self): 
924:    def on_tab_changed(self, index): 
947:    def on_pdf_changed(self, pdf_path: str): 
952:    def _setup_pdf_viewer(self): 
969:    def _crear_carpeta_con_controlador_archivos(self): 
989:    def _configurar_eventos_ui(self): 
997:    def _setup_tooltips(self): 
1019:    def _initialize_ui(self): 
1047:    def _create_custom_title_bar(self): 
1124:    def toggle_maximize(self): 
1130:    def load_initial_data(self): 
1140:    def _agregar_empresa(self): 
1148:    def _quitar_empresa(self): 
1211:    def _guardar_proyecto(self): 
1232:    def _abrir_portafirmas(self): 
1238:    def _cambiar_tipo_contrato(self): 
1259:    def _aplicar_nuevo_tipo_contrato(self, nuevo_tipo: str): 
1281:    def _actualizar_pestanas_por_tipo(self, tipo: str): 
1340:    def _configurar_por_tipo_contrato(self, tipo: str): 
1359:    def _activar_modo_mantenimiento(self): 
1366:    def _activar_modo_facturas(self): 
1370:    def _activar_modo_facturas_externas(self): 
1374:    def _activar_modo_servicios(self): 
1378:    def _activar_modo_obras(self): 
1384:    def mostrar_dialogo_crear_contrato(self): 
1464:    def mostrar_dialogo_clonar_contrato(self): 
1515:    def mostrar_dialogo_borrar_contrato(self): 
1631:    def get_current_contract_manager(self): 
1635:    def get_current_contract_data(self): 
1641:    def reload_contracts_list(self): 
1646:    def get_datos_proyecto_completo(self): 
1652:    def get_current_pdf_path(self): 
1658:    def has_pdf_loaded(self): 
1666:    def _setup_resumen_integrado(self): 
1695:    def _actualizar_cronograma_inicial(self): 
1720:    def _ejecutar_actualizacion_cronograma(self, nombre_contrato: str): 
1737:    def closeEvent(self, event): 
1751:    def _crear_copia_respaldo(self): 
1762:    def arreglar_botones_ahora(self): 
1844:def main(): 
8:from typing import Dict, Any, List 
9:from PyQt5.QtWidgets import (QMainWindow, QApplication, QMessageBox,  
11:from PyQt5.QtCore import QTimer, Qt 
12:from PyQt5.QtGui import QIcon 
13:from PyQt5 import QtWidgets, uic 
14:from PyQt5.QtWidgets import QLineEdit, QTextEdit, QDoubleSpinBox, QDateEdit, QTimeEdit, QSpinBox, QComboBox 
15:from PyQt5.QtCore import QDate, QTime 
17:from PyQt5.QtCore import QPropertyAnimation, QEasingCurve, QRect 
18:from PyQt5.QtCore import QPropertyAnimation, QEasingCurve, QParallelAnimationGroup 
19:from PyQt5.QtWidgets import QGraphicsOpacityEffect, QLineEdit, QTextEdit 
20:from modelos_py import Proyecto, DatosContrato, TipoContrato, Constantes 
21:from helpers_py import ( 
25:from PyQt5.QtCore import QT_VERSION_STR 
29:from .controlador_json import ControladorJson 
30:from .controlador_tablas import ControladorTablas 
31:from .controlador_actuaciones_facturas import ControladorActuacionesFacturas 
32:from .controlador_calculos import ControladorCalculos 
33:from .controlador_documentos import ControladorDocumentos 
34:from .controlador_autosave import ControladorAutoGuardado 
35:from .controlador_eventos_ui import ControladorEventosUI 
36:from .dialogo_gestionar_contratos import DialogoCrearContrato, DialogoBorrarContrato, DialogoSeleccionTipo, DialogoClonarContrato 
37:from .controlador_pdf_unificado import setup_pdf_viewer_simple 
38:from .controlador_archivos_unificado import GestorArchivos 
162:            from .Controlador_selector import ContractManagerQt5 
203:                    from PyQt5.QtWidgets import QMessageBox 
452:                from datetime import datetime 
546:            from PyQt5.QtWidgets import QTableWidgetItem 
645:                from PyQt5.QtWidgets import QTableWidgetItem 
684:            from PyQt5.QtWidgets import QTableWidgetItem 
685:            from PyQt5.QtCore import Qt 
721:            from PyQt5.QtCore import QDate 
795:                from PyQt5.QtWidgets import QTableWidgetItem 
1029:                from controladores.controlador_routes import ControladorRutas 
1057:                from PyQt5.QtWidgets import QHBoxLayout 
1248:            from .dialogo_gestionar_contratos import DialogoSeleccionTipo 
1388:            from .dialogo_gestionar_contratos import DialogoCrearContrato 
1389:            from PyQt5.QtWidgets import QDialog 
1534:                from .dialogo_gestionar_contratos import DialogoBorrarContrato 
1535:                from PyQt5.QtWidgets import QDialog 
1581:                                # USAR load_contracts_from_json() en lugar de reload_contracts() 
1582:                                self.contract_manager.load_contracts_from_json() 
1672:            from .controlador_resumen import integrar_resumen_completo 
1682:            from .controlador_fases_documentos import integrar_controlador_fases 
1755:                from helpers_py import crear_copia_respaldo_proyecto 
1771:                from controladores.controlador_calculos import ControladorCalculos 
1777:                from controladores.controlador_eventos_ui import ControladorEventosUI 
1862:        from PyQt5.QtWidgets import QApplication 
6:import sys 
7:import os 
8:from typing import Dict, Any, List 
9:from PyQt5.QtWidgets import (QMainWindow, QApplication, QMessageBox,  
11:from PyQt5.QtCore import QTimer, Qt 
12:from PyQt5.QtGui import QIcon 
13:from PyQt5 import QtWidgets, uic 
14:from PyQt5.QtWidgets import QLineEdit, QTextEdit, QDoubleSpinBox, QDateEdit, QTimeEdit, QSpinBox, QComboBox 
15:from PyQt5.QtCore import QDate, QTime 
16:import datetime 
17:from PyQt5.QtCore import QPropertyAnimation, QEasingCurve, QRect 
18:from PyQt5.QtCore import QPropertyAnimation, QEasingCurve, QParallelAnimationGroup 
19:from PyQt5.QtWidgets import QGraphicsOpacityEffect, QLineEdit, QTextEdit 
20:from modelos_py import Proyecto, DatosContrato, TipoContrato, Constantes 
21:from helpers_py import ( 
25:from PyQt5.QtCore import QT_VERSION_STR 
28:# Importar controladores especializados 
29:from .controlador_json import ControladorJson 
30:from .controlador_tablas import ControladorTablas 
31:from .controlador_actuaciones_facturas import ControladorActuacionesFacturas 
32:from .controlador_calculos import ControladorCalculos 
33:from .controlador_documentos import ControladorDocumentos 
34:from .controlador_autosave import ControladorAutoGuardado 
35:from .controlador_eventos_ui import ControladorEventosUI 
36:from .dialogo_gestionar_contratos import DialogoCrearContrato, DialogoBorrarContrato, DialogoSeleccionTipo, DialogoClonarContrato 
37:from .controlador_pdf_unificado import setup_pdf_viewer_simple 
38:from .controlador_archivos_unificado import GestorArchivos 
96:            # IMPORTANTE: Conectar cálculos con eventos 
162:            from .Controlador_selector import ContractManagerQt5 
203:                    from PyQt5.QtWidgets import QMessageBox 
452:                from datetime import datetime 
546:            from PyQt5.QtWidgets import QTableWidgetItem 
645:                from PyQt5.QtWidgets import QTableWidgetItem 
684:            from PyQt5.QtWidgets import QTableWidgetItem 
685:            from PyQt5.QtCore import Qt 
721:            from PyQt5.QtCore import QDate 
722:            import datetime 
795:                from PyQt5.QtWidgets import QTableWidgetItem 
828:        import time 
1029:                from controladores.controlador_routes import ControladorRutas 
1057:                from PyQt5.QtWidgets import QHBoxLayout 
1248:            from .dialogo_gestionar_contratos import DialogoSeleccionTipo 
1388:            from .dialogo_gestionar_contratos import DialogoCrearContrato 
1389:            from PyQt5.QtWidgets import QDialog 
1455:        except ImportError as e: 
1456:            print(f"[ControladorGrafica] ❌ Error de importación: {e}") 
1457:            QMessageBox.critical(self, "Error", f"No se pudo importar DialogoCrearContrato: {e}") 
1460:            import traceback 
1532:            # Importar y crear diálogo 
1534:                from .dialogo_gestionar_contratos import DialogoBorrarContrato 
1535:                from PyQt5.QtWidgets import QDialog 
1536:            except ImportError as e: 
1537:                print(f"[ControladorGrafica] ❌ Error importando DialogoBorrarContrato: {e}") 
1538:                QMessageBox.critical(self, "Error", f"No se pudo importar el diálogo: {e}") 
1625:            import traceback 
1671:            # Importar e integrar el sistema de resumen 
1672:            from .controlador_resumen import integrar_resumen_completo 
1682:            from .controlador_fases_documentos import integrar_controlador_fases 
1755:                from helpers_py import crear_copia_respaldo_proyecto 
1771:                from controladores.controlador_calculos import ControladorCalculos 
1777:                from controladores.controlador_eventos_ui import ControladorEventosUI 
1862:        from PyQt5.QtWidgets import QApplication 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_json.py 
================================== 
 
14:class GestorContratosJSON: 
394:class ControladorJson: 
17:    def __init__(self, ruta_archivo: str): 
20:        print(f"[GestorContratosJSON] 📁 Inicializado con archivo: {ruta_archivo}") 
31:                print(f"[GestorContratosJSON] Tamaño del archivo: {tamaño} bytes") 
37:                with open(self.ruta_archivo, "r", encoding="utf-8") as archivo: 
87:            with open(self.ruta_archivo, "w", encoding="utf-8") as archivo: 
112:            with open(self.ruta_archivo, "w", encoding="utf-8") as archivo: 
17:    def __init__(self, ruta_archivo: str): 
22:    def _cargar_datos_iniciales(self) -> Dict[str, Any]: 
60:    def _crear_estructura_inicial(self) -> Dict[str, Any]: 
94:    def recargar_datos(self) -> bool: 
103:    def guardar_datos(self) -> bool: 
122:    def buscar_contrato_por_nombre(self, nombre_contrato: str) -> Optional[Dict[str, Any]]: 
159:    def buscar_contrato_por_expediente(self, numero_expediente: str) -> Optional[Dict[str, Any]]: 
173:    def buscar_contrato_inteligente(self, identificador: str) -> Optional[Dict[str, Any]]: 
201:    def crear_contrato(self, datos_contrato: Dict[str, Any]) -> bool: 
222:            obras = self.datos.setdefault("obras", []) 
238:    def actualizar_contrato(self, nombre_contrato: str, datos_actualizados: Dict[str, Any]) -> bool: 
268:    def listar_contratos(self) -> List[Dict[str, str]]: 
289:    def obtener_estadisticas(self) -> Dict[str, Any]: 
312:    def obtener_todos_nombres_obras(self) -> List[str]: 
326:    def obtener_contrato_por_nombre(self, nombre_contrato: str) -> Dict[str, Any]: 
331:    def cargar_datos_obra(self, identificador: str) -> Dict[str, Any]: 
336:    def get_contract_type_for_contract(self, nombre_contrato: str) -> str: 
362:    def eliminar_contrato(self, nombre_contrato: str) -> bool: 
397:    def __init__(self, main_window=None): 
401:    def _inicializar_gestor(self) -> Optional[GestorContratosJSON]: 
443:    def esta_disponible(self) -> bool: 
447:    def recargar_datos(self) -> bool: 
455:    def leer_contrato_completo(self, nombre_contrato: str) -> Optional[Dict[str, Any]]: 
461:    def leer_campo_contrato(self, nombre_contrato: str, nombre_campo: str) -> Any: 
472:    def leer_lista_contratos(self) -> List[Dict[str, str]]: 
478:    def leer_nombres_contratos(self) -> List[str]: 
486:    def obtener_todos_nombres_obras(self) -> List[str]: 
490:    def obtener_contrato_por_nombre(self, nombre_contrato: str) -> Dict[str, Any]: 
495:    def cargar_datos_obra(self, identificador: str) -> Dict[str, Any]: 
502:    def guardar_campo_en_json(self, nombre_contrato: str, nombre_campo: str, valor: str) -> bool: 
522:    def guardar_texto_largo_en_json(self, nombre_contrato: str, nombre_campo: str, texto: str) -> bool: 
526:    def guardar_fecha_en_json(self, nombre_contrato: str, nombre_campo: str, fecha: str) -> bool: 
531:    def guardar_empresas_unificadas_en_json(self, nombre_contrato: str, empresas_data: List[Dict[str, str]]) -> bool: 
548:    def guardar_empresas_en_json(self, nombre_contrato: str, empresas_data: List[Dict[str, str]]) -> bool: 
552:    def guardar_ofertas_en_json(self, nombre_contrato: str, ofertas_data: List[Dict[str, str]]) -> bool: 
557:    def guardar_contrato_completo(self, nombre_contrato: str, datos_completos: Dict[str, Any]) -> bool: 
566:    def crear_contrato_nuevo(self, datos_contrato: Dict[str, Any]) -> bool: 
586:    def obtener_tipo_contrato(self, nombre_contrato: str) -> str: 
591:                return "servicios"  # Default 
614:    def get_contract_type_for_contract(self, nombre_contrato: str) -> str: 
618:    def obtener_estadisticas(self) -> Dict[str, Any]: 
625:    def validar_integridad_json(self) -> Dict[str, Any]: 
671:    def hacer_backup(self, sufijo: str = None) -> bool: 
698:    def clonar_contrato(self, nombre_origen, nuevo_nombre, opciones=None): 
762:    def _clonar_selectivo(self, contrato_origen, nuevo_nombre, opciones): 
950:    def _limpiar_campos_no_clonados(self, opciones): 
1015:    def restaurar_backup(self, archivo_backup: str) -> bool: 
1038:    def exportar_contrato(self, nombre_contrato: str, archivo_destino: str) -> bool: 
1060:    def importar_contrato(self, archivo_origen: str) -> bool: 
1095:    def limpiar_datos_vacios(self) -> int: 
1130:    def optimizar_json(self) -> bool:   
1178:    def obtener_ruta_archivo(self) -> str: 
1184:    def cambiar_archivo_json(self, nueva_ruta: str) -> bool: 
1201:    def cargar_json_simple(self, archivo_path: str) -> Dict[str, Any]: 
1210:    def guardar_json_simple(self, datos: Dict[str, Any], archivo_path: str) -> bool: 
1220:    def borrar_contrato_con_carpetas(self, nombre_contrato: str) -> tuple[bool, str]: 
1256:                        # Seleccionar el primer contrato disponible o mensaje por defecto 
10:from datetime import datetime 
11:from typing import Dict, Any, Optional, List 
12:from PyQt5.QtWidgets import QMessageBox 
406:                from .controlador_routes import ControladorRutas 
7:import json 
8:import os 
9:import re 
10:from datetime import datetime 
11:from typing import Dict, Any, Optional, List 
12:from PyQt5.QtWidgets import QMessageBox 
406:                from .controlador_routes import ControladorRutas 
413:            except ImportError: 
578:            import traceback 
677:            import shutil 
787:        if opciones.get("importes", False): 
789:            datos_clonados["importeLicitacion"] = contrato_origen.get("importeLicitacion", 0.0) 
790:            datos_clonados["importeIVA"] = contrato_origen.get("importeIVA", 0.0) 
791:            datos_clonados["importeTotal"] = contrato_origen.get("importeTotal", 0.0) 
825:        if any([opciones.get("ofertas_importes", False),  
837:                    if opciones.get("ofertas_importes", False): 
838:                        oferta_clonada["importe"] = oferta.get("importe", 0.0) 
913:        if opciones.get("liquidacion_importes", False) or opciones.get("liquidacion_saldos", False): 
918:                if opciones.get("liquidacion_importes", False): 
920:                        "importeLicitado": liquidacion.get("importeLicitado", 0.0), 
921:                        "importeFacturado": liquidacion.get("importeFacturado", 0.0), 
922:                        "importePenalizaciones": liquidacion.get("importePenalizaciones", 0.0), 
945:        # IMPORTANTE: Asegurar que el nuevo nombre se preserve 
972:            # Si no se seleccionó importes, limpiar campos de presupuesto 
973:            if not opciones.get("importes", False): 
1021:            import shutil 
1060:    def importar_contrato(self, archivo_origen: str) -> bool: 
1061:        """Importar contrato desde archivo JSON""" 
1067:                datos_importacion = json.load(f) 
1070:            contrato = datos_importacion.get("contrato_exportado") 
1073:                contrato = datos_importacion 
1092:            print(f"[ControladorJson] ❌ Error importando contrato: {e}") 
1112:                # Eliminar campos vacíos (excepto campos importantes) 
1113:                campos_importantes = ["nombreObra", "numeroExpediente", "fechaCreacion"] 
1116:                    if campo not in campos_importantes: 
1228:                import os 
1229:                import shutil 
1276:            import traceback 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_pdf_unificado.py 
================================== 
 
71:class PDFScrollArea(QScrollArea): 
92:class _PDFControllerOptimized(QObject): 
859:class DialogoPDF(QDialog): 
630:            print(f"[PDF] 📁 Verificando existencia del archivo: {pdf_path}") 
31:def _load_fitz_lazy(): 
62:def _load_fitz_async(callback=None): 
64:    def load_thread(): 
74:    def __init__(self, pdf_controller, parent=None): 
78:    def wheelEvent(self, event): 
97:    def __init__(self, main_window: QObject): 
124:    def _init_ui_widgets(self): 
147:    def _connect_basic_signals(self): 
171:    def _show_loading_message(self): 
184:    def _start_lazy_fitz_loading(self): 
192:        def on_fitz_loaded(success: bool, error: str): 
203:    def _on_fitz_ready(self): 
227:    def _on_fitz_failed(self, error: str): 
242:    def _show_ready_message(self): 
257:    def set_contract_name(self, name: str): 
279:    def on_tab_activated(self): 
298:    def get_current_pdf_path(self) -> str: 
302:    def has_pdf_loaded(self) -> bool: 
308:    def load_pdf(self, path: str) -> bool: 
371:    def select_pdf_file(self): 
396:    def _setup_custom_scroll_area(self): 
434:    def render_page(self): 
469:    def next_page(self): 
476:    def prev_page(self): 
483:    def _update_controls(self): 
508:    def goto_page(self, page_number: int): 
517:    def change_zoom(self, value: int): 
523:    def fit_to_window(self): 
552:    def open_external(self): 
567:    def clear_pdf(self): 
585:    def _load_pdf_from_contract(self): 
652:    def _configurar_fecha_inicio_automatica(self, pdf_path: str): 
693:    def _guardar_fecha_en_json(self, nombre_campo: str, fecha_str: str): 
707:    def _save_pdf_to_json(self, pdf_path: str): 
741:    def _marcar_fase_creacion_proyecto(self): 
773:    def _registrar_fecha_creacion_en_fases(self, pdf_path: str): 
827:    def _actualizar_cronograma_tras_pdf(self): 
839:    def get_project_folder_path(self) -> str: 
852:def setup_pdf_viewer_simple(main_window: QObject, container_name: str = "contenedor_pdf") -> _PDFControllerOptimized: 
860:    def __init__(self, parent=None, nombre_documento="documento"): 
865:    def setupUI(self): 
928:def convertir_docx_a_pdf_simple(docx_path: str) -> bool: 
953:def mostrar_dialogo_pdf(parent=None, nombre_documento="documento", docx_path=None) -> bool: 
15:from datetime import datetime 
16:from typing import Optional 
18:from PyQt5.QtCore import Qt, QObject, pyqtSignal, QTimer 
19:from PyQt5.QtGui import QImage, QPixmap, QFont 
20:from PyQt5.QtWidgets import ( 
277:            self._load_pdf_from_contract() 
296:                self._load_pdf_from_contract() 
446:            qpix = QPixmap.fromImage(image) 
457:                qpix_right = QPixmap.fromImage(image_right) 
585:    def _load_pdf_from_contract(self): 
587:        print(f"[PDF] 🔍 _load_pdf_from_contract llamado para contrato: '{self._contract_name}'") 
660:            fecha_creacion = datetime.fromtimestamp(timestamp_creacion) 
672:                        from PyQt5.QtCore import QDate 
767:                from PyQt5.QtCore import QTimer 
786:            fecha_creacion = datetime.fromtimestamp(timestamp_creacion) 
937:        from docx2pdf import convert 
984:    from PyQt5.QtWidgets import QApplication, QMainWindow 
11:import os 
12:import platform 
13:import subprocess 
14:import threading 
15:from datetime import datetime 
16:from typing import Optional 
18:from PyQt5.QtCore import Qt, QObject, pyqtSignal, QTimer 
19:from PyQt5.QtGui import QImage, QPixmap, QFont 
20:from PyQt5.QtWidgets import ( 
44:        import fitz  # PyMuPDF 
49:    except ImportError as e: 
649:            import traceback 
672:                        from PyQt5.QtCore import QDate 
767:                from PyQt5.QtCore import QTimer 
824:            import traceback 
937:        from docx2pdf import convert 
967:                    import subprocess 
968:                    import os 
984:    from PyQt5.QtWidgets import QApplication, QMainWindow 
985:    import sys 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_resumen.py 
================================== 
 
18:from dataclasses import dataclass 
31:# =================== ENUMS Y DATACLASSES =================== 
34:class EstadoDocumento(Enum): 
42:class TipoDocumento(Enum): 
53:@dataclass 
54:class DocumentoGenerado: 
69:class TrackerDocumentos: 
251:        html = f"<div class='historial-documentos'>" 
343:class IntegradorResumen: 
355:            print(f"[IntegradorResumen] Main window: {self.main_window.__class__.__name__}") 
58:    ruta_archivo: str 
180:    def registrar_documento_completado(self, contrato: str, documento_id: str, ruta_archivo: str, observaciones: str = ""): 
328:    def _obtener_tamano_archivo(self, ruta_archivo: str) -> float: 
540:                print(f"[IntegradorResumen] 📄 Abriendo archivo: {file_path}") 
554:                        print(f"[IntegradorResumen] ❌ Error abriendo archivo: {e}") 
560:                            f"No se pudo abrir el archivo:\n{e}" 
688:            if ruta_archivo: 
692:                self._mostrar_mensaje_exito(f"✅ Documento Word generado exitosamente {ruta_archivo}\n\nEl documento se abrirá automáticamente.") 
709:                    print(f"[IntegradorResumen] ⚠️ Error abriendo archivo: {e}") 
72:    def __init__(self, ruta_base: str = None): 
78:    def cargar_historial(self): 
110:    def guardar_historial(self): 
138:    def registrar_documento_iniciado(self, contrato: str, tipo, nombre: str, plantilla: str = "") -> str: 
180:    def registrar_documento_completado(self, contrato: str, documento_id: str, ruta_archivo: str, observaciones: str = ""): 
189:    def registrar_documento_error(self, contrato: str, documento_id: str, error: str): 
196:    def obtener_documentos_contrato(self, contrato: str) -> List[DocumentoGenerado]: 
199:    def obtener_resumen_contrato(self, contrato: str) -> Dict[str, Any]: 
245:    def generar_reporte_html(self, contrato: str) -> str: 
321:    def _buscar_documento(self, contrato: str, documento_id: str) -> Optional[DocumentoGenerado]: 
328:    def _obtener_tamano_archivo(self, ruta_archivo: str) -> float: 
346:    def __init__(self, main_window): 
351:    def integrar_en_aplicacion(self) -> bool: 
367:    def _encontrar_tab_widget(self): 
380:    def _conectar_senales(self): 
391:    def _conectar_botones_ui(self): 
494:    def reconectar_botones_si_es_necesario(self): 
502:    def test_botones_resumen(self): 
522:    def _on_anchor_clicked(self, url): 
543:                    # Abrir archivo con aplicación por defecto del sistema 
571:                # Para otros tipos de enlaces, usar comportamiento por defecto 
577:    def _agregar_cronograma_visual(self): 
580:            # Buscar el QGraphicsView que está definido en actas.ui 
596:    def _actualizar_cronograma_visual(self, nombre_contrato: str): 
599:            # Buscar el QGraphicsView que está definido en actas.ui 
638:    def _on_generar_fichero_resumen(self): 
729:    def _on_actualizar_resumen(self): 
812:    def _generar_resumen_basico(self, nombre_contrato: str, datos_contrato: dict) -> str: 
839:    def _debug_fases_completo(self, nombre_contrato: str): 
900:    def _generar_resumen_con_fases(self, nombre_contrato: str, datos_contrato: dict) -> str: 
1057:    def _dibujar_timeline_fases(self, scene: QGraphicsScene, datos_fases: dict): 
1108:                icono.setDefaultTextColor(QColor("white")) 
1133:                fecha_text.setDefaultTextColor(QColor("#666666")) 
1144:    def _generar_cronograma_fases(self, nombre_contrato: str) -> str: 
1335:    def _actualizar_visualizacion_resumen(self, html: str): 
1340:    def _actualizar_estado_boton_generar(self, texto: str): 
1346:    def _mostrar_mensaje_exito(self, mensaje: str): 
1354:    def _mostrar_mensaje_error(self, mensaje: str): 
1362:    def _obtener_datos_contrato_completos(self, nombre_contrato: str) -> dict: 
1404:    def _mapear_datos_a_formato_estandar(self, datos_originales: dict) -> dict: 
1449:    def _convertir_a_numero(self, valor) -> float: 
1471:    def notificar_documento_generado(self, tipo_str: str, nombre: str, ruta: str = ""): 
1476:    def generar_fichero_resumen(self, nombre_contrato: str, datos_contrato: dict) -> str: 
1492:def integrar_resumen_completo(main_window): 
17:from typing import Dict, List, Any, Optional 
18:from dataclasses import dataclass 
19:from enum import Enum 
20:from pathlib import Path 
22:from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, QTextEdit,  
27:from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QRectF, QPointF 
28:from PyQt5.QtGui import QFont, QPixmap, QPainter, QColor, QPen, QBrush 
94:                                fecha_generacion=datetime.datetime.fromisoformat(doc_data['fecha_generacion']), 
525:            from PyQt5.QtCore import QUrl 
556:                        from PyQt5.QtWidgets import QMessageBox 
564:                    from PyQt5.QtWidgets import QMessageBox 
875:            from PyQt5.QtWidgets import QDateEdit 
1349:            from PyQt5.QtWidgets import QMessageBox 
1357:            from PyQt5.QtWidgets import QMessageBox 
1498:    from controladores.controlador_resumen import integrar_resumen_completo 
1532:    print("   from controladores.controlador_resumen import integrar_resumen_completo") 
12:import os 
13:import json 
14:import datetime 
15:import re 
16:import glob 
17:from typing import Dict, List, Any, Optional 
18:from dataclasses import dataclass 
19:from enum import Enum 
20:from pathlib import Path 
22:from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, QTextEdit,  
27:from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QRectF, QPointF 
28:from PyQt5.QtGui import QFont, QPixmap, QPainter, QColor, QPen, QBrush 
139:        import uuid 
525:            from PyQt5.QtCore import QUrl 
526:            import os 
527:            import subprocess 
528:            import platform 
556:                        from PyQt5.QtWidgets import QMessageBox 
564:                    from PyQt5.QtWidgets import QMessageBox 
696:                    import os 
697:                    import subprocess 
698:                    import platform 
720:            import traceback 
801:            import traceback 
823:                    <p><strong>💰 Importe Total:</strong> {datos_contrato.get('importeTotal', 'No especificado')}</p> 
875:            from PyQt5.QtWidgets import QDateEdit 
896:            import traceback 
966:                ('importeTotal', 'Importe Total', '💰'), 
973:                if campo == 'importeTotal' and isinstance(valor, (int, float)): 
987:                import os 
1349:            from PyQt5.QtWidgets import QMessageBox 
1357:            from PyQt5.QtWidgets import QMessageBox 
1378:            import json 
1416:                # Importes - mapear desde tu estructura 
1417:                'importeLicitacion': self._convertir_a_numero(datos_originales.get('basePresupuesto', 0)), 
1418:                'importeIVA': self._convertir_a_numero(datos_originales.get('ivaPresupuestoBase', 0)), 
1419:                'importeTotal': self._convertir_a_numero(datos_originales.get('totalPresupuestoBase', 0)), 
1424:                # Fechas importantes 
1498:    from controladores.controlador_resumen import integrar_resumen_completo 
1532:    print("   from controladores.controlador_resumen import integrar_resumen_completo") 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_routes.py 
================================== 
 
11:class ControladorRutas: 
150:    def get_ruta_ui(self, nombre_archivo: str = None) -> Optional[str]: 
14:    def __init__(self): 
23:    def _detectar_si_es_ejecutable(self) -> bool: 
31:    def _inicializar_rutas(self): 
55:    def get_base_path(self) -> str: 
59:    def get_recursos_path(self) -> str: 
65:    def get_ruta_base_datos(self) -> str: 
83:    def get_ruta_backups(self) -> str: 
97:    def get_ruta_carpeta_obras(self) -> str: 
105:    def get_ruta_plantillas(self) -> str: 
121:        ruta_default = os.path.join(self._base_path, "plantillas") 
122:        os.makedirs(ruta_default, exist_ok=True) 
123:        return ruta_default 
125:    def get_ruta_plantilla(self, nombre_plantilla: str) -> Optional[str]: 
150:    def get_ruta_ui(self, nombre_archivo: str = None) -> Optional[str]: 
178:    def get_ruta_icono(self, nombre_icono: str = "icono.ico") -> Optional[str]: 
198:    def get_ruta_imagen_autor(self, nombre_imagen: str = "autor.jpg") -> Optional[str]: 
216:    def get_ruta_resource(self, ruta_relativa: str) -> str: 
240:    def get_ruta_salida_documentos(self, nombre_contrato: str = "") -> str: 
255:    def get_ruta_temp(self) -> str: 
262:    def validar_estructura_basica(self) -> bool: 
298:    def crear_estructura_basica(self): 
328:    def listar_plantillas_disponibles(self): 
356:def get_base_path() -> str: 
360:def get_plantilla_path(nombre: str) -> Optional[str]: 
364:def get_obras_path() -> str: 
368:def resource_path(relative_path: str) -> str: 
372:def validar_y_crear_estructura(): 
7:from pathlib import Path 
8:from typing import Optional 
5:import os 
6:import sys 
7:from pathlib import Path 
8:from typing import Optional 
244:            import re 
257:        import tempfile 
320:            import json 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\Controlador_selector.py 
================================== 
 
13:class ContractManagerQt5(QObject): 
20:    def __init__(self, combo_box: QComboBox, label_tipo: QLabel, label_expediente: QLabel = None): 
48:    def _load_empty_contracts(self): 
54:    def _init_json_manager(self): 
79:    def _connect_signals(self): 
87:    def _set_initial_state(self): 
96:    def _on_text_changed(self, text: str): 
103:    def _on_index_changed(self, index: int): 
111:    def _validate_contract_type(self, tipo: str) -> str: 
129:            print(f"[ContractManager] ⚠️ Tipo no válido: {tipo}, usando 'Servicios' por defecto") 
136:    def _update_labels(self, tipo: str, expediente: str): 
151:    def _update_combo_box(self): 
171:    def get_current_contract(self) -> Optional[str]: 
175:    def get_current_contract_data(self) -> Optional[Dict[str, Any]]: 
186:    def reload_contracts(self): 
204:    def _get_current_datetime(self): 
209:    def _load_empty_contracts_and_update(self): 
216:    def load_contracts_from_json(self): 
274:    def _process_contract_selection(self, contract_name: str): 
284:            # Limpiar si es selección por defecto 
352:    def _verificar_y_crear_estructura_carpeta(self, contract_data): 
388:    def _mostrar_notificacion_estructura_creada(self, carpeta_path, contract_data): 
418:    def _clear_contract_info(self): 
433:    def _get_main_window(self): 
464:    def _mostrar_tab_widget(self): 
495:    def obtener_nombre_contrato_actual(self) -> str: 
504:    def _ocultar_tab_widget(self): 
530:    def _guardar_campo_con_foco_actual(self, main_window): 
582:def setup_contract_manager(main_window) -> ContractManagerQt5: 
7:from typing import Dict, Any, Optional 
8:from PyQt5.QtWidgets import QComboBox, QLabel 
9:from PyQt5.QtCore import QObject, pyqtSignal 
11:from PyQt5.QtWidgets import QMessageBox 
37:            self.load_contracts_from_json() 
57:            from .controlador_json import GestorContratosJSON 
193:        self.load_contracts_from_json() 
206:        from datetime import datetime, timezone 
210:        """Método temporal mientras se implementa load_contracts_from_json""" 
216:    def load_contracts_from_json(self): 
452:            from PyQt5.QtWidgets import QApplication 
533:            from PyQt5.QtWidgets import QApplication 
594:            from PyQt5.QtWidgets import QComboBox 
5:import json 
6:import os 
7:from typing import Dict, Any, Optional 
8:from PyQt5.QtWidgets import QComboBox, QLabel 
9:from PyQt5.QtCore import QObject, pyqtSignal 
10:import traceback 
11:from PyQt5.QtWidgets import QMessageBox 
57:            from .controlador_json import GestorContratosJSON 
58:            import sys 
206:        from datetime import datetime, timezone 
267:                import traceback 
278:            import traceback 
452:            from PyQt5.QtWidgets import QApplication 
533:            from PyQt5.QtWidgets import QApplication 
594:            from PyQt5.QtWidgets import QComboBox 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\controlador_tablas.py 
================================== 
 
20:class ControladorTablas(QObject): 
28:    def __init__(self, main_window=None): 
35:    def setup_tabla_empresas(self, tabla: QTableWidget): 
75:    def setup_tabla_ofertas(self, tabla: QTableWidget): 
111:    def agregar_fila(self, tabla: QTableWidget): 
136:    def quitar_fila(self, tabla: QTableWidget): 
165:    def agregar_fila_con_datos(self, tabla: QTableWidget, datos: List[str]): 
197:    def eliminar_filas_vacias(self, tabla: QTableWidget): 
239:    def sincronizar_tablas(self): 
269:    def obtener_empresas(self) -> List[Empresa]: 
317:    def limpiar_tablas(self): 
358:    def obtener_ofertas(self) -> List[Oferta]: 
404:    def cargar_empresas(self, empresas: List[Empresa]): 
449:    def cargar_ofertas(self, ofertas: List[Oferta]): 
476:    def _guardar_tablas_automaticamente(self): 
511:    def _ejecutar_calculos_completos_si_disponible(self): 
546:    def _on_empresa_item_changed(self, item): 
588:    def _on_empresa_selection_changed(self): 
600:    def _on_oferta_item_changed(self, item): 
645:    def validar_datos_tablas(self) -> tuple[bool, List[str]]: 
698:    def obtener_estadisticas(self) -> Dict[str, Any]: 
5:from typing import List, Optional, Dict, Any 
6:from PyQt5.QtWidgets import ( 
10:from PyQt5.QtCore import Qt, pyqtSignal, QObject 
11:from PyQt5.QtGui import QDoubleValidator 
13:from modelos_py import Empresa, Oferta, Constantes 
14:from helpers_py import ( 
5:from typing import List, Optional, Dict, Any 
6:from PyQt5.QtWidgets import ( 
10:from PyQt5.QtCore import Qt, pyqtSignal, QObject 
11:from PyQt5.QtGui import QDoubleValidator 
13:from modelos_py import Empresa, Oferta, Constantes 
14:from helpers_py import ( 
379:                    importe = 0.0 
384:                            importe = convertir_numero_espanol_a_float(oferta_item.text()) 
385:                            presenta_oferta = importe > 0 
387:                            importe = 0.0 
392:                        importe=importe, 
462:                    if oferta.presenta_oferta and oferta.importe > 0: 
463:                        oferta_formatted = formatear_numero_espanol(oferta.importe) 
543:            import traceback 
680:            ofertas_validas = [o for o in ofertas if o.presenta_oferta and o.importe > 0] 
684:                menor_importe = min(o.importe for o in ofertas_validas) 
685:                ofertas_minimas = [o for o in ofertas_validas if abs(o.importe - menor_importe) < 0.01] 
689:                    errores.append(f"Múltiples empresas con la oferta mínima ({menor_importe:.2f}€): {', '.join(empresas_minimas)}") 
708:            ofertas_validas = [o for o in ofertas if o.presenta_oferta and o.importe > 0] 
714:                'menor_oferta': min(o.importe for o in ofertas_validas) if ofertas_validas else 0.0, 
715:                'mayor_oferta': max(o.importe for o in ofertas_validas) if ofertas_validas else 0.0, 
716:                'promedio_ofertas': sum(o.importe for o in ofertas_validas) / len(ofertas_validas) if ofertas_validas else 0.0, 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\dialogo_gestionar_contratos.py 
================================== 
 
11:class DialogoSeleccionTipo(QDialog): 
138:class DialogoCrearContrato(QDialog): 
220:class DialogoClonarContrato(QDialog): 
590:class DialogoBorrarContrato(QDialog): 
14:    def __init__(self, parent=None, tipo_actual=""): 
20:    def _setup_ui(self): 
94:    def _on_tipo_changed(self, texto): 
100:    def _confirmar_cambio(self): 
133:    def get_tipo_seleccionado(self): 
141:    def __init__(self, parent=None): 
149:    def setup_ui(self): 
199:    def validar_campos(self): 
204:    def validar_y_crear(self): 
223:    def __init__(self, parent=None, contrato_origen="", datos_contrato=None): 
234:    def setup_ui(self): 
324:        # Seleccionar básico por defecto 
331:    def crear_checkbox(self, key, texto, descripcion="", checked=False): 
343:    def crear_seccion_datos_contrato(self, layout): 
382:    def crear_seccion_empresas(self, layout): 
402:    def crear_seccion_ofertas(self, layout): 
428:    def crear_seccion_fechas(self, layout): 
448:    def crear_seccion_liquidacion(self, layout): 
468:    def crear_seccion_documentos(self, layout): 
493:    def crear_seccion_documentos_especificos(self, layout): 
527:    def seleccionar_todo(self): 
532:    def deseleccionar_todo(self): 
537:    def seleccionar_basico(self): 
554:    def get_opciones_seleccionadas(self): 
558:    def validar_y_clonar(self): 
593:    def __init__(self, parent=None, nombre_contrato="", datos_contrato=None): 
603:    def setup_ui(self): 
657:        self.btn_eliminar = QPushButton("🗑️ ELIMINAR DEFINITIVAMENTE") 
670:    def confirmar_eliminacion(self): 
5:from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,  
8:from PyQt5.QtCore import Qt 
5:from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,  
8:from PyQt5.QtCore import Qt 
368:            "importes",  
369:            "Importes de Licitación", 
370:            "Copia todos los importes (licitación, IVA, total)" 
408:            "ofertas_importes",  
409:            "Importes de Ofertas", 
410:            "Copia los importes ofertados por cada empresa" 
454:            "liquidacion_importes",  
455:            "Importes de Liquidación", 
456:            "Copia importes licitados, facturados y penalizaciones" 
516:        # Nota importante 
517:        nota = QLabel("<b>IMPORTANTE:</b> Estos documentos se generarán con datos mínimos.<br>" 
546:            "importes", 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\ventana_doble_tabla.py 
================================== 
 
16:class VentanaDobleTabla(QDialog): 
126:            info_archivo = QLabel(f"Archivo: {os.path.basename(self.archivo_excel)}") 
403:        if archivo: 
19:    def __init__(self, empresas_aplicacion: List[Dict], archivo_excel: str = None, modo="importar"): 
34:    def leer_empresas_excel(self, archivo_excel: str) -> List[Dict]: 
77:    def guardar_empresas_excel(self, empresas: List[Dict], archivo_excel: str) -> bool: 
102:    def initUI(self): 
394:    def seleccionar_archivo_excel(self): 
407:    def cargar_datos(self): 
418:    def llenar_tabla(self, tabla: QTableWidget, empresas: List[Dict]): 
428:    def mover_a_derecha(self): 
435:    def mover_a_izquierda(self): 
442:    def mover_todas_derecha(self): 
449:    def mover_todas_izquierda(self): 
457:    def _mover_seleccionadas(self, tabla_origen: QTableWidget, tabla_destino: QTableWidget, accion: str): 
486:    def _mover_todas(self, tabla_origen: QTableWidget, tabla_destino: QTableWidget, accion: str): 
505:    def _quitar_seleccionadas(self, tabla: QTableWidget, descripcion: str): 
524:    def _vaciar_tabla(self, tabla: QTableWidget): 
528:    def obtener_empresas_tabla(self, tabla: QTableWidget) -> List[Dict]: 
542:    def empresa_existe(self, empresa_buscar: Dict, lista_empresas: List[Dict]) -> bool: 
559:    def actualizar_estadisticas(self): 
571:    def ejecutar_accion(self): 
578:    def _ejecutar_exportacion(self): 
600:    def _ejecutar_importacion(self): 
622:    def get_resultado(self): 
632:    def closeEvent(self, event): 
641:def mostrar_ventana_importar_exportar_excel(parent, empresas_aplicacion, archivo_excel=None, modo="importar"): 
658:def obtener_empresas_actuales(self): 
750:def aplicar_empresas_importadas(main_window, empresas_importadas): 
786:def actualizar_tabla_empresas(main_window, empresas): 
811:def test_ventana_excel(): 
822:        {'nombre': 'Arquitectos DEF', 'nif': '11223344C', 'email': 'estudio@def.com', 'contacto': '600555666'} 
833:def gestionar_importacion_exportacion_excel(main_window, modo): 
852:def _procesar_importacion(main_window, empresas_actuales): 
885:def _procesar_exportacion(main_window, empresas_actuales): 
7:from PyQt5.QtWidgets import (QDialog, QWidget, QVBoxLayout, QHBoxLayout,  
10:from PyQt5.QtCore import Qt, QPoint 
11:from PyQt5.QtGui import QFont 
12:from typing import List, Dict, Optional 
813:    from PyQt5.QtWidgets import QApplication 
3:Interfaz de doble tabla con flechas para importar/exportar empresas desde/hacia Excel 
7:from PyQt5.QtWidgets import (QDialog, QWidget, QVBoxLayout, QHBoxLayout,  
10:from PyQt5.QtCore import Qt, QPoint 
11:from PyQt5.QtGui import QFont 
12:from typing import List, Dict, Optional 
13:import os 
14:import pandas as pd 
19:    def __init__(self, empresas_aplicacion: List[Dict], archivo_excel: str = None, modo="importar"): 
25:        self.modo = modo  # "exportar" o "importar" 
105:        self.setWindowTitle(f"{'Exportar hacia' if self.modo == 'exportar' else 'Importar desde'} Excel - Gestión de Empresas") 
112:        titulo = QLabel(f"Gestión de Empresas - {'Exportación hacia' if self.modo == 'exportar' else 'Importación desde'} Excel") 
140:            instrucciones = """IMPORTAR DESDE EXCEL: Izquierda: Empresas en la aplicación | Derecha: Empresas del Excel | Use las flechas para seleccionar""" 
197:            texto_btn = "Importar" 
198:            tooltip = "Importar empresa seleccionada desde Excel" 
372:            texto_ejecutar = "Importar a App" 
433:            self._mover_seleccionadas(self.tabla_derecha, self.tabla_izquierda, "importar") 
447:            self._mover_todas(self.tabla_derecha, self.tabla_izquierda, "importar") 
572:        """Ejecuta la acción principal (importar o exportar)""" 
576:            self._ejecutar_importacion() 
600:    def _ejecutar_importacion(self): 
601:        """Ejecuta la importación desde Excel""" 
607:            QMessageBox.information(self, "Sin cambios", "No se han añadido nuevas empresas para importar") 
610:        respuesta = QMessageBox.question(self, "Confirmar Importación", 
611:                                       f"¿Importar {empresas_nuevas} nueva(s) empresa(s) a la aplicación?", 
618:            QMessageBox.information(self, "Importación Completada", 
619:                                  f"{empresas_nuevas} empresas importadas exitosamente") 
641:def mostrar_ventana_importar_exportar_excel(parent, empresas_aplicacion, archivo_excel=None, modo="importar"): 
642:    """Función principal para mostrar la ventana de importación/exportación""" 
747:        import traceback 
750:def aplicar_empresas_importadas(main_window, empresas_importadas): 
751:    """Aplica empresas importadas al sistema""" 
756:            tabla.setRowCount(len(empresas_importadas)) 
758:            for fila, empresa in enumerate(empresas_importadas): 
764:            print(f"[Excel] Tabla actualizada con {len(empresas_importadas)} empresas") 
775:                    contrato_actual, empresas_importadas 
780:        print(f"[Excel] Aplicadas {len(empresas_importadas)} empresas") 
813:    from PyQt5.QtWidgets import QApplication 
814:    import sys 
825:    # Probar modo importar 
826:    ventana = VentanaDobleTabla(empresas_prueba, None, "importar") 
833:def gestionar_importacion_exportacion_excel(main_window, modo): 
836:    Gestiona todo el proceso de importación/exportación 
844:        if modo == "importar": 
845:            _procesar_importacion(main_window, empresas_actuales) 
852:def _procesar_importacion(main_window, empresas_actuales): 
853:    """Procesa la importación desde Excel""" 
857:            main_window, "Seleccionar Excel para importar", "", 
864:        # Mostrar ventana de importación 
865:        resultado = mostrar_ventana_importar_exportar_excel( 
866:            main_window, empresas_actuales, archivo_excel, "importar" 
870:            empresas_importadas = resultado['empresas'] 
871:            empresas_nuevas = len(empresas_importadas) - len(empresas_actuales) 
876:                    main_window.controlador_eventos_ui.aplicar_empresas_importadas(empresas_importadas) 
877:                QMessageBox.information(main_window, "Importación Exitosa", 
878:                    f"Se importaron {empresas_nuevas} nuevas empresas desde:\n{os.path.basename(archivo_excel)}") 
880:                QMessageBox.information(main_window, "Sin cambios", "No se importaron empresas nuevas") 
883:        QMessageBox.critical(main_window, "Error de Importación", f"Error importando:\n{str(e)}") 
893:        resultado = mostrar_ventana_importar_exportar_excel( 
 
---------------------------------------- 
 
 
================================== 
ARCHIVO: C:\Users\pablo\Desktop\generador_actas\controladores\__init__.py 
================================== 
 
6:from .controlador_grafica import ControladorGrafica 
7:from .controlador_json import ControladorJson 
8:from .controlador_documentos import ControladorDocumentos 
9:from .controlador_tablas import ControladorTablas 
10:from .Controlador_selector import ContractManagerQt5 
11:from .controlador_archivos_unificado import GestorArchivos 
6:from .controlador_grafica import ControladorGrafica 
7:from .controlador_json import ControladorJson 
8:from .controlador_documentos import ControladorDocumentos 
9:from .controlador_tablas import ControladorTablas 
10:from .Controlador_selector import ContractManagerQt5 
11:from .controlador_archivos_unificado import GestorArchivos 
 
---------------------------------------- 
 
